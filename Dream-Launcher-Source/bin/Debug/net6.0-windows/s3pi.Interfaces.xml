<?xml version="1.0"?>
<doc>
    <assembly>
        <name>s3pi.Interfaces</name>
    </assembly>
    <members>
        <member name="T:s3pi.Interfaces.AApiVersionedFields">
            <summary>
            API Objects should all descend from this Abstract class.
            It will provide versioning support -- when implemented.
            It provides ContentFields support
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IApiVersion">
            <summary>
            Support for API versioning
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IApiVersion.RequestedApiVersion">
            <summary>
            The version of the API in use
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IApiVersion.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IContentFields">
            <summary>
            Standardised interface to API objects (hiding the reflection)
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IContentFields.ContentFields">
            <summary>
            A <c>List&lt;string&gt;</c> of available field names on object
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IContentFields.Item(System.String)">
            <summary>
            A <see cref="T:s3pi.Interfaces.TypedValue"/> on this object
            </summary>
            <param name="index">The <see cref="T:System.String"/> representing the name of the field
            (i.e. one of the values from <see cref="P:s3pi.Interfaces.IContentFields.ContentFields"/>)</param>
            <returns>The <see cref="T:s3pi.Interfaces.TypedValue"/> of field <paramref name="index"/> on this API object.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when an unknown index name is requested</exception>
        </member>
        <member name="F:s3pi.Interfaces.AApiVersionedFields.requestedApiVersion">
            <summary>
            Versioning is not currently implemented
            Set this to the version of the API requested on object creation
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.GetContentFields(System.Int32,System.Type)">
            <summary>
            Versioning is not currently implemented
            Return the list of fields for a given API Class
            </summary>
            <param name="APIversion">Set to 0 (== "best")</param>
            <param name="t">The class type for which to get the fields</param>
            <returns>List of field names for the given API version</returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.GetTGIBlocks(s3pi.Interfaces.AApiVersionedFields,System.String)">
            <summary>
            Get the TGIBlock list for a Content Field.
            </summary>
            <param name="o">The object to query.</param>
            <param name="f">The property name under inspection.</param>
            <returns>The TGIBlock list for a Content Field, if present; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.GetTGIBlocks(System.String)">
            <summary>
            Get the TGIBlock list for a Content Field.
            </summary>
            <param name="f">The property name under inspection.</param>
            <returns>The TGIBlock list for a Content Field, if present; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:s3pi.Interfaces.AApiVersionedFields"/> object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:s3pi.Interfaces.AApiVersionedFields"/> object.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.CompareByPriority(System.String,System.String)">
            <summary>
            Sorts Content Field names by their <see cref="T:s3pi.Interfaces.ElementPriorityAttribute"/> (if set)
            </summary>
            <param name="x">First content field name</param>
            <param name="y">Second content field name</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.GetContentFieldTypes(System.Int32,System.Type)">
            <summary>
            Gets a lookup table from fieldname to type.
            </summary>
            <param name="APIversion">Version of API to use</param>
            <param name="t">API data type to query</param>
            <returns></returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.FOURCC(System.String)">
            <summary>
            Convert a string (up to 8 characters) to a UInt64
            </summary>
            <param name="s">String to convert</param>
            <returns>UInt64 packed representation of <paramref name="s"/></returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.FOURCC(System.UInt64)">
            <summary>
            Convert a UInt64 to a string (up to 8 characters, high-order zeros omitted)
            </summary>
            <param name="i">Bytes to convert</param>
            <returns>String representation of <paramref name="i"/></returns>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.FlagNames(System.Type)">
            <summary>
            Return a space-separated string containing valid enumeration names for the given type
            </summary>
            <param name="t">Enum type</param>
            <returns>Valid enum names</returns>
        </member>
        <member name="P:s3pi.Interfaces.AApiVersionedFields.RequestedApiVersion">
            <summary>
            The version of the API in use
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AApiVersionedFields.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AApiVersionedFields.ContentFields">
            <summary>
            The list of available field names on this API object
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AApiVersionedFields.Item(System.String)">
            <summary>
            A typed value on this object
            </summary>
            <param name="index">The name of the field (i.e. one of the values from ContentFields)</param>
            <returns>The typed value of the named field</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when an unknown index name is requested</exception>
        </member>
        <member name="P:s3pi.Interfaces.AApiVersionedFields.ValueBuilderFields">
            <summary>
            The fields ValueBuilder will return; used to eliminate those that should not be used.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AApiVersionedFields.ValueBuilder">
            <summary>
            Returns a string representing the value of the field (and any contained sub-fields)
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.AApiVersionedFields.Comparer`1">
            <summary>
            A class enabling sorting API objects by a ContentFields name
            </summary>
            <typeparam name="T">API object type</typeparam>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.Comparer`1.#ctor(System.String)">
            <summary>
            Sort API Objects by <paramref name="field"/>
            </summary>
            <param name="field">ContentField name to sort by</param>
        </member>
        <member name="M:s3pi.Interfaces.AApiVersionedFields.Comparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects of type T and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first IContentFields object to compare.</param>
            <param name="y">The second IContentFields object to compare.</param>
            <returns>Value Condition Less than zero -- x is less than y.
            Zero -- x equals y.
            Greater than zero -- x is greater than y.</returns>
        </member>
        <member name="T:s3pi.Interfaces.AHandlerElement">
            <summary>
            A useful extension to <see cref="T:s3pi.Interfaces.AApiVersionedFields"/> where a change handler is required
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AHandlerElement.handler">
            <summary>
            Holds the <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AHandlerElement.dirty">
            <summary>
            Indicates if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> has been changed by OnElementChanged()
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AHandlerElement.#ctor(System.Int32,System.EventHandler)">
            <summary>
            Initialize a new instance
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
        </member>
        <member name="M:s3pi.Interfaces.AHandlerElement.Clone(System.EventHandler)">
            <summary>
            Get a copy of the <see cref="T:s3pi.Interfaces.AHandlerElement"/> but with a new change <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="handler">The replacement <see cref="T:System.EventHandler"/> delegate.</param>
            <returns>Return a copy of the <see cref="T:s3pi.Interfaces.AHandlerElement"/> but with a new change <see cref="T:System.EventHandler"/>.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AHandlerElement.OnElementChanged">
            <summary>
            Flag the <see cref="T:s3pi.Interfaces.AHandlerElement"/> as dirty and invoke the <see cref="T:System.EventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AHandlerElement.SetHandler(System.EventHandler)">
            <summary>
            Change the element change handler to <paramref name="handler"/>.
            </summary>
            <param name="handler">The new element change handler.</param>
        </member>
        <member name="T:s3pi.Interfaces.HandlerElement`1">
            <summary>
            An extension to <see cref="T:s3pi.Interfaces.AHandlerElement"/>, for simple data types (such as <see cref="T:System.UInt32"/>).
            </summary>
            <typeparam name="T">A simple data type (such as <see cref="T:System.UInt32"/>).</typeparam>
            <remarks>For an example of use, see <see cref="T:s3pi.Interfaces.SimpleList`1"/>.</remarks>
            <seealso cref="T:s3pi.Interfaces.SimpleList`1"/>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.#ctor(System.Int32,System.EventHandler)">
            <summary>
            Initialize a new instance with a default value.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.#ctor(System.Int32,System.EventHandler,`0)">
            <summary>
            Initialize a new instance with an initial value of <paramref name="basis"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="basis">Initial value for instance.</param>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.HandlerElement{`0})">
            <summary>
            Initialize a new instance with an initial value from <paramref name="basis"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="basis">Element containing the initial value for instance.</param>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.Clone(System.EventHandler)">
            <summary>
            Get a copy of the HandlerElement but with a new change <see cref="T:System.EventHandler"/>.
            </summary>
            <param name="handler">The replacement HandlerElement delegate.</param>
            <returns>Return a copy of the HandlerElement but with a new change <see cref="T:System.EventHandler"/>.</returns>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.Equals(s3pi.Interfaces.HandlerElement{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.HandlerElement`1"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.HandlerElement`1"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.HandlerElement`1"/>; otherwise, false.</returns>
            <exception cref="T:System.NullReferenceException">The obj parameter is null.</exception>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:s3pi.Interfaces.HandlerElement`1.op_Implicit(s3pi.Interfaces.HandlerElement{`0})~`0">
            <summary>
            Implicit cast from <see cref="T:s3pi.Interfaces.HandlerElement`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="value">Value to cast.</param>
            <returns>Cast value.</returns>
        </member>
        <member name="P:s3pi.Interfaces.HandlerElement`1.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.HandlerElement`1.ContentFields">
            <summary>
            The list of available field names on this API object.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.HandlerElement`1.Val">
            <summary>
            The value of the object.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.HandlerElement`1.Value">
            <summary>
            Get displayable value.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.TGIBlockListIndex`1">
            <summary>
            An extension to <see cref="T:s3pi.Interfaces.AHandlerElement"/>, for lists of TGIBlockList indices.
            </summary>
            <typeparam name="T">A simple data type (such as <see cref="T:System.Int32"/>).</typeparam>
            <remarks>For an example of use, see <see cref="T:s3pi.Interfaces.IndexList`1"/>.</remarks>
            <seealso cref="T:s3pi.Interfaces.IndexList`1"/>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListIndex`1.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Initialize a new instance with a default value.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="ParentTGIBlocks">Reference to list into which this is an index.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListIndex`1.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.TGIBlockListIndex{`0},s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Initialize a new instance with an initial value from <paramref name="basis"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="basis">Element containing the initial value for instance.</param>
            <param name="ParentTGIBlocks">Reference to list into which this is an index, or null to use that in <paramref name="basis"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListIndex`1.#ctor(System.Int32,System.EventHandler,`0,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Initialize a new instance with an initial value of <paramref name="value"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="value">Initial value for instance.</param>
            <param name="ParentTGIBlocks">Reference to list into which this is an index.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListIndex`1.Equals(s3pi.Interfaces.TGIBlockListIndex{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListIndex`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.HandlerElement`1"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.HandlerElement`1"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.HandlerElement`1"/>; otherwise, false.</returns>
            <exception cref="T:System.NullReferenceException">The obj parameter is null.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListIndex`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListIndex`1.op_Implicit(s3pi.Interfaces.TGIBlockListIndex{`0})~`0">
            <summary>
            Implicit cast from <see cref="T:s3pi.Interfaces.HandlerElement`1"/> to <typeparamref name="T"/>.
            </summary>
            <param name="value">Value to cast.</param>
            <returns>Cast value.</returns>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlockListIndex`1.ParentTGIBlocks">
            <summary>
            Reference to list into which this is an index.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlockListIndex`1.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlockListIndex`1.ContentFields">
            <summary>
            The list of available field names on this API object.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlockListIndex`1.Data">
            <summary>
            The value of the object.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlockListIndex`1.Value">
            <summary>
            Displayable value
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.AResourceIndexEntry">
            <summary>
            An abstract class, descended from <see cref="T:s3pi.Interfaces.AResourceKey"/>, providing an abstract implemention of <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>,
            representing an index entry within a package.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.AResourceKey">
            <summary>
            An abstract class, extending <see cref="T:s3pi.Interfaces.AHandlerElement"/> and implementing <see cref="T:s3pi.Interfaces.IResourceKey"/>.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IResourceKey">
            <summary>
            Exposes a standard set of properties to identify a resource
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceKey.ResourceType">
            <summary>
            The "type" of the resource
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceKey.ResourceGroup">
            <summary>
            The "group" the resource is part of
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceKey.Instance">
            <summary>
            The "instance" number of the resource
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AResourceKey.resourceType">
            <summary>
            The "type" of the resource
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AResourceKey.resourceGroup">
            <summary>
            The "group" the resource is part of
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AResourceKey.instance">
            <summary>
            The "instance" number of the resource
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.#ctor(System.Int32,System.EventHandler)">
            <summary>
            Initialize a new instance
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AResourceKey"/> changes.</param>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.IResourceKey)">
            <summary>
            Initialize a new instance
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AResourceKey"/> changes.</param>
            <param name="basis">The <see cref="T:s3pi.Interfaces.IResourceKey"/> values to use to initialise the instance.</param>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.#ctor(System.Int32,System.EventHandler,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            Initialize a new instance
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AResourceKey"/> changes.</param>
            <param name="resourceType">The type of the resource.</param>
            <param name="resourceGroup">The group of the resource.</param>
            <param name="instance">The instance of the resource.</param>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.Equals(s3pi.Interfaces.IResourceKey,s3pi.Interfaces.IResourceKey)">
            <summary>
            Determines whether the specified <see cref="T:s3pi.Interfaces.IResourceKey"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:s3pi.Interfaces.IResourceKey"/> to compare.</param>
            <param name="y">The second <see cref="T:s3pi.Interfaces.IResourceKey"/> to compare.</param>
            <returns>true if the specified <see cref="T:s3pi.Interfaces.IResourceKey"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.GetHashCode(s3pi.Interfaces.IResourceKey)">
            <summary>
            Returns a hash code for the specified <see cref="T:s3pi.Interfaces.IResourceKey"/>.
            </summary>
            <param name="obj">The <see cref="T:s3pi.Interfaces.IResourceKey"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and
            <paramref name="obj"/> is null.</exception>
            <seealso cref="M:s3pi.Interfaces.AResourceKey.GetHashCode"/>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.GetHashCode">
            <summary>
            Serves as a hash function for an <see cref="T:s3pi.Interfaces.AResourceKey"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:s3pi.Interfaces.AResourceKey"/>.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.Equals(s3pi.Interfaces.IResourceKey)">
            <summary>
            Indicates whether the current <see cref="T:s3pi.Interfaces.AResourceKey"/> instance is equal to another <see cref="T:s3pi.Interfaces.IResourceKey"/> instance.
            </summary>
            <param name="other">An <see cref="T:s3pi.Interfaces.IResourceKey"/> instance to compare with this instance.</param>
            <returns>true if the current instance is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.AResourceKey"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.AResourceKey"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.AResourceKey"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.CompareTo(s3pi.Interfaces.IResourceKey)">
            <summary>
            Compare this <see cref="T:s3pi.Interfaces.AResourceKey"/> to another <see cref="T:s3pi.Interfaces.IResourceKey"/> for sort order purposes
            </summary>
            <param name="other">Target <see cref="T:s3pi.Interfaces.IResourceKey"/></param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.  The return value has these meanings:
            <table>
            <thead><tr><td><strong>Value</strong></td><td><strong>Meaning</strong></td></tr></thead>
            <tbody>
            <tr><td>Less than zero</td><td>This instance is less than <paramref name="other"/>.</td></tr>
            <tr><td>Zero</td><td>This instance is equal to <paramref name="other"/>.</td></tr>
            <tr><td>Greater than zero</td><td>This instance is greater than <paramref name="other"/>.</td></tr>
            </tbody>
            </table>
            </returns>
            <exception cref="T:System.NotImplementedException">Either this object's Type or the target's is not comparable</exception>
            <exception cref="T:System.ArgumentException">The target is not comparable with this object</exception>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.TryParse(System.String,s3pi.Interfaces.IResourceKey)">
            <summary>
            Converts the string representation of a resource key to its <see cref="T:s3pi.Interfaces.AResourceKey"/>
            equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">A string containing a resource key to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:s3pi.Interfaces.AResourceKey"/> equivalent
            to the resource key contained in <paramref name="value"/>, if the conversion succeeded, or
            unchanged if the conversion failed.  The conversion fails if the <paramref name="value"/>
            parameter is null or is not of the correct format.  This parameter must not be null.
            </param>
            <returns>true if <paramref name="value"/> was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.NullReferenceException">Thrown if <paramref name="result"/> is null.</exception>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.op_Implicit(s3pi.Interfaces.AResourceKey)~System.String">
            <summary>
            Converts an <see cref="T:s3pi.Interfaces.AResourceKey"/> to a string representation.
            </summary>
            <param name="value">The <see cref="T:s3pi.Interfaces.AResourceKey"/> to convert</param>
            <returns>The 42 character string representation of this resource key,
            of the form 0xXXXXXXXX-0xXXXXXXXX-0xXXXXXXXXXXXXXXXX.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResourceKey.ToString">
            <summary>
            Returns a string representation of this <see cref="T:s3pi.Interfaces.AResourceKey"/>.
            </summary>
            <returns>The 42 character string representation of this resource key,
            of the form 0xXXXXXXXX-0xXXXXXXXX-0xXXXXXXXXXXXXXXXX.</returns>
        </member>
        <member name="P:s3pi.Interfaces.AResourceKey.ResourceType">
            <summary>
            The "type" of the resource
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceKey.ResourceGroup">
            <summary>
            The "group" the resource is part of
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceKey.Instance">
            <summary>
            The "instance" number of the resource
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IResourceIndexEntry">
            <summary>
            An index entry within a package
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceIndexEntry.Chunkoffset">
            <summary>
            If the resource was read from a package, the location in the package the resource was read from
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceIndexEntry.Filesize">
            <summary>
            The number of bytes the resource uses within the package
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceIndexEntry.Memsize">
            <summary>
            The number of bytes the resource uses in memory
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceIndexEntry.Compressed">
            <summary>
            0xFFFF if Filesize != Memsize, else 0x0000
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceIndexEntry.Unknown2">
            <summary>
            Always 0x0001
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceIndexEntry.Stream">
            <summary>
            A <see cref="T:System.IO.MemoryStream"/> covering the index entry bytes
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResourceIndexEntry.IsDeleted">
            <summary>
            True if the index entry has been deleted from the package index
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AResourceIndexEntry.#ctor">
            <summary>
            Initialize a new instance with the default API version and no change <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AResourceIndexEntry.ResourceIndexEntryChanged">
            <summary>
            Raised when the AResourceIndexEntry changes
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AResourceIndexEntry.Equals(s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Indicates whether the current <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> instance is equal to another <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> instance.
            </summary>
            <param name="other">An <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> instance to compare with this instance.</param>
            <returns>true if the current instance is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResourceIndexEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.AResourceIndexEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.AResourceIndexEntry"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.AResourceIndexEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResourceIndexEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.ContentFields">
            <summary>
            The list of available field names on this API object
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.Chunkoffset">
            <summary>
            If the resource was read from a package, the location in the package the resource was read from
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.Filesize">
            <summary>
            The number of bytes the resource uses within the package
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.Memsize">
            <summary>
            The number of bytes the resource uses in memory
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.Compressed">
            <summary>
            0xFFFF if Filesize != Memsize, else 0x0000
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.Unknown2">
            <summary>
            Always 0x0001
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.Stream">
            <summary>
            A MemoryStream covering the index entry bytes
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResourceIndexEntry.IsDeleted">
            <summary>
            True if the index entry has been deleted from the package index
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.APackage">
            <summary>
            Abstract definition of a package
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IPackage">
            <summary>
            Representation of a Sims 3 Package
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.SavePackage">
            <summary>
            Tell the package to save itself to wherever it believes it came from
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.SaveAs(System.IO.Stream)">
            <summary>
            Tell the package to save itself to the <see cref="T:System.IO.Stream"/> <paramref name="s"/>
            </summary>
            <param name="s">A <see cref="T:System.IO.Stream"/> to which the package should be saved</param>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.SaveAs(System.String)">
            <summary>
            Tell the package to save itself to a file with the name in <paramref name="path"/>
            </summary>
            <param name="path">A fully-qualified file name</param>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.Find(System.UInt32,s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for the first <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> that matches the conditions defined by
            <paramref name="flags"/> and <paramref name="values"/>.
            </summary>
            <param name="flags">True bits enable matching against numerically equivalent <paramref name="values"/> entry.</param>
            <param name="values">Field values to compare against.</param>
            <returns>The first matching <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>, if any; otherwise null.</returns>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.Find(System.String[],s3pi.Interfaces.TypedValue[])">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for the first <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> that matches the conditions defined by
            <paramref name="names"/> and <paramref name="values"/>.
            </summary>
            <param name="names">Names of <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> fields to compare.</param>
            <param name="values">Field values to compare against.</param>
            <returns>The first matching <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>, if any; otherwise null.</returns>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.Find(System.Predicate{s3pi.Interfaces.IResourceIndexEntry})">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for the first <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> that matches the conditions defined by
            the <c>Predicate&lt;IResourceIndexEntry&gt;</c> <paramref name="Match"/>.
            </summary>
            <param name="Match"><c>Predicate&lt;IResourceIndexEntry&gt;</c> defining matching conditions.</param>
            <returns>The first matching <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>, if any; otherwise null.</returns>
            <remarks>Note that entries marked as deleted will not be returned.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.FindAll(System.UInt32,s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            <paramref name="flags"/> and <paramref name="values"/>.
            </summary>
            <param name="flags">True bits enable matching against numerically equivalent <paramref name="values"/> entry.</param>
            <param name="values">Field values to compare against.</param>
            <returns>An <c>IList&lt;IResourceIndexEntry&gt;</c> of zero or more matches.</returns>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.FindAll(System.String[],s3pi.Interfaces.TypedValue[])">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            <paramref name="names"/> and <paramref name="values"/>.
            </summary>
            <param name="names">Names of <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> fields to compare.</param>
            <param name="values">Field values to compare against.</param>
            <returns>An <c>IList&lt;IResourceIndexEntry&gt;</c> of zero or more matches.</returns>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.FindAll(System.Predicate{s3pi.Interfaces.IResourceIndexEntry})">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            the <c>Predicate&lt;IResourceIndexEntry&gt;</c> <paramref name="Match"/>.
            </summary>
            <param name="Match"><c>Predicate&lt;IResourceIndexEntry&gt;</c> defining matching conditions.</param>
            <returns>Zero or more matches.</returns>
            <remarks>Note that entries marked as deleted will not be returned.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.AddResource(s3pi.Interfaces.IResourceKey,System.IO.Stream,System.Boolean)">
            <summary>
            Add a resource to the <see cref="T:s3pi.Interfaces.IPackage"/>.
            </summary>
            <param name="rk">The resource's <see cref="T:s3pi.Interfaces.IResourceKey"/></param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the resource's data</param>
            <param name="rejectDups">If true, fail if the <see cref="T:s3pi.Interfaces.IResourceKey"/> already exists</param>
            <returns>Null if rejectDups and the <see cref="T:s3pi.Interfaces.IResourceKey"/> exists; else the new <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/></returns>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.ReplaceResource(s3pi.Interfaces.IResourceIndexEntry,s3pi.Interfaces.IResource)">
            <summary>
            Tell the <see cref="T:s3pi.Interfaces.IPackage"/> to replace the data for the resource indexed by <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> <paramref name="rc"/>
            with the data from the <see cref="T:s3pi.Interfaces.IResource"/> <paramref name="res"/>.
            </summary>
            <param name="rc">Target <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>.</param>
            <param name="res">Source <see cref="T:s3pi.Interfaces.IResource"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.IPackage.DeleteResource(s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Tell the package to delete the resource indexed by <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> <paramref name="rc"/>.
            </summary>
            <param name="rc">Target <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>.</param>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Magic">
            <summary>
            Package header: "DBPF" bytes
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Major">
            <summary>
            Package header: 0x00000002
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Minor">
            <summary>
            Package header: 0x00000000
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Unknown1">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Indexcount">
            <summary>
            Package header: number of entries in the package index
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Unknown2">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Indexsize">
            <summary>
            Package header: index size on disk in bytes
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Unknown3">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Indexversion">
            <summary>
            Package header: always 3?
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Indexposition">
            <summary>
            Package header: index position in file
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Unknown4">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.HeaderStream">
            <summary>
            A <see cref="T:System.IO.MemoryStream"/> covering the package header bytes
            </summary>
        </member>
        <member name="E:s3pi.Interfaces.IPackage.ResourceIndexInvalidated">
            <summary>
            Package index: raised when the result of a previous call to GetResourceList becomes invalid 
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.Indextype">
            <summary>
            Package index: the index format in use
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IPackage.GetResourceList">
            <summary>
            Package index: the index as a <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> list
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.APackage.SavePackage">
            <summary>
            Tell the package to save itself to wherever it believes it came from
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.APackage.SaveAs(System.IO.Stream)">
            <summary>
            Tell the package to save itself to the stream <paramref name="s"/>
            </summary>
            <param name="s">A stream to which the package should be saved</param>
        </member>
        <member name="M:s3pi.Interfaces.APackage.SaveAs(System.String)">
            <summary>
            Tell the package to save itself to a file with the name in <paramref name="path"/>
            </summary>
            <param name="path">A fully-qualified file name</param>
        </member>
        <member name="M:s3pi.Interfaces.APackage.Find(System.UInt32,s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for the first <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> that matches the conditions defined by
            <paramref name="flags"/> and <paramref name="values"/>.
            </summary>
            <param name="flags">True bits enable matching against numerically equivalent <paramref name="values"/> entry.</param>
            <param name="values">Field values to compare against.</param>
            <returns>The first matching <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>, if any; otherwise null.</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.Find(System.String[],s3pi.Interfaces.TypedValue[])">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for the first <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> that matches the conditions defined by
            <paramref name="names"/> and <paramref name="values"/>.
            </summary>
            <param name="names">Names of <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> fields to compare.</param>
            <param name="values">Field values to compare against.</param>
            <returns>The first matching <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>, if any; otherwise null.</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.Find(System.Predicate{s3pi.Interfaces.IResourceIndexEntry})">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for the first <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> that matches the conditions defined by
            the <c>Predicate&lt;IResourceIndexEntry&gt;</c> <paramref name="Match"/>.
            </summary>
            <param name="Match"><c>Predicate&lt;IResourceIndexEntry&gt;</c> defining matching conditions.</param>
            <returns>The first matching <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>, if any; otherwise null.</returns>
            <remarks>Note that entries marked as deleted will not be returned.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.APackage.FindAll(System.UInt32,s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            <paramref name="flags"/> and <paramref name="values"/>.
            </summary>
            <param name="flags">True bits enable matching against numerically equivalent <paramref name="values"/> entry.</param>
            <param name="values">Field values to compare against.</param>
            <returns>An <c>IList&lt;IResourceIndexEntry&gt;</c> of zero or more matches.</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.FindAll(System.String[],s3pi.Interfaces.TypedValue[])">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            <paramref name="names"/> and <paramref name="values"/>.
            </summary>
            <param name="names">Names of <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> fields to compare.</param>
            <param name="values">Field values to compare against.</param>
            <returns>An <c>IList&lt;IResourceIndexEntry&gt;</c> of zero or more matches.</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.FindAll(System.Predicate{s3pi.Interfaces.IResourceIndexEntry})">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            the <c>Predicate&lt;IResourceIndexEntry&gt;</c> <paramref name="Match"/>.
            </summary>
            <param name="Match"><c>Predicate&lt;IResourceIndexEntry&gt;</c> defining matching conditions.</param>
            <returns>Zero or more matches.</returns>
            <remarks>Note that entries marked as deleted will not be returned.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.APackage.AddResource(s3pi.Interfaces.IResourceKey,System.IO.Stream,System.Boolean)">
            <summary>
            Add a resource to the package
            </summary>
            <param name="rk">The resource key</param>
            <param name="stream">The stream that contains the resource data</param>
            <param name="rejectDups">If true, fail if the resource key already exists</param>
            <returns>Null if rejectDups and the resource key exists; else the new IResourceIndexEntry</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.ReplaceResource(s3pi.Interfaces.IResourceIndexEntry,s3pi.Interfaces.IResource)">
            <summary>
            Tell the package to replace the data for the resource indexed by <paramref name="rc"/>
            with the data from the resource <paramref name="res"/>
            </summary>
            <param name="rc">Target resource index</param>
            <param name="res">Source resource</param>
        </member>
        <member name="M:s3pi.Interfaces.APackage.DeleteResource(s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Tell the package to delete the resource indexed by <paramref name="rc"/>
            </summary>
            <param name="rc">Target resource index</param>
        </member>
        <member name="M:s3pi.Interfaces.APackage.NewPackage(System.Int32)">
            <summary>
            Initialise a new, empty package and return the IPackage reference
            </summary>
            <param name="APIversion">(unused)</param>
            <returns>IPackage reference to an empty package</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.NewPackage(System.Int32,System.Int32)">
            <summary>
            Initialise a new, empty package and return the IPackage reference
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="major">Major version for the DBPF package.</param>
            <returns>IPackage reference to an empty package</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.OpenPackage(System.Int32,System.String)">
            <summary>
            Open an existing package by filename, read only
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="packagePath">Fully qualified filename of the package</param>
            <returns>IPackage reference to an existing package on disk</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.OpenPackage(System.Int32,System.String,System.Boolean)">
            <summary>
            Open an existing package by filename, optionally readwrite
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="packagePath">Fully qualified filename of the package</param>
            <param name="readwrite">True to open for update</param>
            <returns>IPackage reference to an existing package on disk</returns>
        </member>
        <member name="M:s3pi.Interfaces.APackage.ClosePackage(System.Int32,s3pi.Interfaces.IPackage)">
            <summary>
            Releases any internal references associated with the given package
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="pkg">IPackage reference to close</param>
        </member>
        <member name="M:s3pi.Interfaces.APackage.GetResource(s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Required internally by s3pi - <b>not</b> for use in user tools.
            Please use <c>WrapperDealer.GetResource(int, IPackage, IResourceIndexEntry)</c> instead.
            </summary>
            <param name="rie">IResourceIndexEntry of resource</param>
            <returns>The resource data (uncompressed, if necessary)</returns>
            <remarks>Used by WrapperDealer to get the data for a resource.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.APackage.OnResourceIndexInvalidated(System.Object,System.EventArgs)">
            <summary>
            Used to indicate a resource index returned by GetResourceList is no longer valid (as a whole)
            </summary>
            <param name="sender">Object causing the list to become invalid</param>
            <param name="e">(not used)</param>
        </member>
        <member name="P:s3pi.Interfaces.APackage.ContentFields">
            <summary>
            The list of available field names on this API object
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Magic">
            <summary>
            Package header: "DBPF" bytes
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Major">
            <summary>
            Package header: 0x00000002
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Minor">
            <summary>
            Package header: 0x00000000
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Unknown1">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Indexcount">
            <summary>
            Package header: number of entries in the package index
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Unknown2">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Indexsize">
            <summary>
            Package header: index size on disk in bytes
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Unknown3">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Indexversion">
            <summary>
            Package header: always 3?
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Indexposition">
            <summary>
            Package header: index position in file
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Unknown4">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.HeaderStream">
            <summary>
            A MemoryStream covering the package header bytes
            </summary>
        </member>
        <member name="E:s3pi.Interfaces.APackage.ResourceIndexInvalidated">
            <summary>
            Package index: raised when the result of a previous call to GetResourceList becomes invalid 
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.Indextype">
            <summary>
            Package index: the index format in use
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.APackage.GetResourceList">
            <summary>
            Package index: the index
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.AResource">
            <summary>
            A resource contained in a package.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IResource">
            <summary>
            Minimal resource interface
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResource.Stream">
            <summary>
            The resource content as a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IResource.AsBytes">
            <summary>
            The resource content as a <see cref="T:System.Byte"/> array
            </summary>
        </member>
        <member name="E:s3pi.Interfaces.IResource.ResourceChanged">
            <summary>
            Raised if the resource is changed
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AResource.stream">
            <summary>
            Resource data <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.AResource.dirty">
            <summary>
            Indicates the resource stream may no longer reflect the resource content
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AResource.#ctor(System.Int32,System.IO.Stream)">
            <summary>
            Create a new instance of the resource
            </summary>
            <param name="APIversion">Requested API version</param>
            <param name="s"><see cref="T:System.IO.Stream"/> to use, or null to create from scratch.</param>
        </member>
        <member name="M:s3pi.Interfaces.AResource.UnParse">
            <summary>
            AResource classes must supply an <see cref="M:s3pi.Interfaces.AResource.UnParse"/> method that serializes the class to a <see cref="T:System.IO.Stream"/> that is returned.
            </summary>
            <returns><see cref="T:System.IO.Stream"/> containing serialized class data.</returns>
        </member>
        <member name="M:s3pi.Interfaces.AResource.OnResourceChanged(System.Object,System.EventArgs)">
            <summary>
            AResource classes must use this to indicate the resource has changed.
            </summary>
            <param name="sender">The resource (or sub-class) that has changed.</param>
            <param name="e">(Empty) event data object.</param>
        </member>
        <member name="P:s3pi.Interfaces.AResource.ContentFields">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of available field names on object
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResource.Stream">
            <summary>
            The resource content as a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.AResource.AsBytes">
            <summary>
            The resource content as a <see cref="T:System.Byte"/> array
            </summary>
        </member>
        <member name="E:s3pi.Interfaces.AResource.ResourceChanged">
            <summary>
            Raised if the resource is changed
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.AResourceHandler">
            <summary>
            Used by WrapperDealer to identify "interesting" classes and assemblies.
            The class maps implementers of AResource to string representations of ResourceType.
            Hence each "wrapper" assembly can contain multiple wrapper types (Type key) each of which
            supports one or more ResourceTypes (List&lt;string&gt; value).  The single
            AResourceHandler implementation summarises what the assembly provides.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IResourceHandler">
            <summary>
            Used by <see cref="T:s3pi.Interfaces.AResourceHandler"/>, which is used by <c>WrapperDealer</c>
            to identify "interesting" classes within assemblies
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.AResourceHandler.#ctor">
            <summary>
            Create the content of the Dictionary
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.Vertex">
            <summary>
            Defines a vertex - a point in 3d space defined by three coordinates.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.#ctor(System.Int32,System.EventHandler)">
            <summary>
            Create a vertex at { 0, 0, 0 }.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.#ctor(System.Int32,System.EventHandler,System.IO.Stream)">
            <summary>
            Create a vertex from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> containing coordinates.</param>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.Vertex)">
            <summary>
            Create a vertex from a given value.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="basis"><see cref="T:s3pi.Interfaces.Vertex"/> to copy.</param>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.#ctor(System.Int32,System.EventHandler,System.Single,System.Single,System.Single)">
            <summary>
            Create a vertex at { x, y, z }.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.UnParse(System.IO.Stream)">
            <summary>
            Write the vertex to the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to contain coordinates.</param>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.Equals(s3pi.Interfaces.Vertex)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.Vertex"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.Vertex"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.Vertex"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.Vertex.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:s3pi.Interfaces.Vertex.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Vertex.ContentFields">
            <summary>
            The list of available field names on this API object.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Vertex.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Vertex.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Vertex.Z">
            <summary>
            Z coordinate
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Vertex.Value">
            <summary>
            A displayable representation of the object
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.BoundingBox">
            <summary>
            Defines a bounding box - a imaginary box large enough to completely contain an object
            - by its minimum and maximum vertices.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.#ctor(System.Int32,System.EventHandler)">
            <summary>
            Create an zero-sized bounding box.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.#ctor(System.Int32,System.EventHandler,System.IO.Stream)">
            <summary>
            Create a bounding box from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> containing vertices.</param>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.BoundingBox)">
            <summary>
            Create a bounding box from a given value.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="basis"><see cref="T:s3pi.Interfaces.BoundingBox"/> to copy.</param>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.Vertex,s3pi.Interfaces.Vertex)">
            <summary>
            Create a bounding box with the specified minimum and maximum vertices.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="min">Minimum vertex.</param>
            <param name="max">Maximum vertex.</param>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.UnParse(System.IO.Stream)">
            <summary>
            Write the bounding box to the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to contain vertices.</param>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.Equals(s3pi.Interfaces.BoundingBox)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.BoundingBox"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.BoundingBox"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.BoundingBox"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.BoundingBox.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:s3pi.Interfaces.BoundingBox.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.BoundingBox.ContentFields">
            <summary>
            The list of available field names on this API object.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.BoundingBox.Min">
            <summary>
            Minimum vertex
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.BoundingBox.Max">
            <summary>
            Maximum vertex
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.BoundingBox.Value">
            <summary>
            A displayable representation of the object
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IndexList`1">
            <summary>
            A flexible generic list of <see cref="T:s3pi.Interfaces.DependentList`1"/> indices.
            </summary>
            <typeparam name="T">A simple data type (such as <see cref="T:System.Int32"/> or <see cref="T:System.Byte"/>).</typeparam>
            <seealso cref="T:s3pi.Interfaces.SimpleList`1"/>
        </member>
        <member name="T:s3pi.Interfaces.DependentList`1">
            <summary>
            Abstract extension to <see cref="T:System.Collections.Generic.AHandlerList`1"/> adding support for <see cref="T:System.IO.Stream"/> IO
            and partially implementing <see cref="T:s3pi.Interfaces.IGenericAdd"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of list element</typeparam>
            <seealso cref="T:System.Collections.Generic.AHandlerList`1"/>
            <seealso cref="T:s3pi.Interfaces.IGenericAdd"/>
        </member>
        <member name="T:s3pi.Interfaces.IGenericAdd">
            <summary>
            Classes implementing this interface can have elements added with
            an empty parameter list or
            the list of arguments to a generic class' constructor.
            </summary>
            <seealso cref="T:s3pi.Interfaces.DependentList`1"/>
        </member>
        <member name="M:s3pi.Interfaces.IGenericAdd.Add">
            <summary>
            Add a default element to an <see cref="T:System.Collections.IList"/> that implements this interface.
            </summary>
            <exception cref="T:System.NotImplementedException">Lists of abstract classes will fail
            with a NotImplementedException.</exception>
            <seealso cref="T:s3pi.Interfaces.DependentList`1"/>
        </member>
        <member name="M:s3pi.Interfaces.IGenericAdd.Add(System.Type)">
            <summary>
            Adds an entry to an <see cref="T:System.Collections.IList"/> that implements this interface.
            </summary>
            <param name="instanceType">Type of the instance to create and add to the <see cref="T:System.Collections.IList"/>.</param>
        </member>
        <member name="F:s3pi.Interfaces.DependentList`1.elementHandler">
            <summary>
            Holds the <see cref="T:System.EventHandler"/> delegate to invoke if an element in the <see cref="T:s3pi.Interfaces.DependentList`1"/> changes.
            </summary>
            <remarks>Work around for list event handler triggering during stream constructor and other places.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.#ctor(System.EventHandler,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.DependentList`1"/> class
            that is empty.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="maxSize">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{`0},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.DependentList`1"/> class
            filled with the content of <paramref name="ilt"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="ilt">The initial content of the list.</param>
            <param name="maxSize">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <remarks>Calls <c>this.Add(...)</c> to ensure a fresh instance is created, rather than passing <paramref name="ilt"/> to the base constructor.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.#ctor(System.EventHandler,System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.DependentList`1"/> class
            filled from <see cref="T:System.IO.Stream"/> <paramref name="s"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> to read for the initial content of the list.</param>
            <param name="maxSize">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.Parse(System.IO.Stream)">
            <summary>
            Read list entries from a stream
            </summary>
            <param name="s">Stream containing list entries</param>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.ReadCount(System.IO.Stream)">
            <summary>
            Return the number of elements to be created.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> being processed.</param>
            <returns>The number of elements to be created.</returns>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.CreateElement(System.IO.Stream)">
            <summary>
            Create a new element from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">Stream containing element data.</param>
            <returns>A new element.</returns>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.CreateElement(System.IO.Stream,System.Boolean@)">
            <summary>
            Create a new element from the <see cref="T:System.IO.Stream"/> and indicates whether it counts towards the number of elements to be created.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> containing element data.</param>
            <param name="inc">Whether this call towards the number of elements to be created.</param>
            <returns>A new element.</returns>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.UnParse(System.IO.Stream)">
            <summary>
            Write list entries to a stream
            </summary>
            <param name="s">Stream to receive list entries</param>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.WriteCount(System.IO.Stream,System.Int32)">
            <summary>
            Write the count of list elements to the stream.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to write <paramref name="count"/> to.</param>
            <param name="count">Value to write to <see cref="T:System.IO.Stream"/> <paramref name="s"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.WriteElement(System.IO.Stream,`0)">
            <summary>
            Write an element to the stream.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to write <paramref name="element"/> to.</param>
            <param name="element">Value to write to <see cref="T:System.IO.Stream"/> <paramref name="s"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.Add">
            <summary>
            Add a default element to a <see cref="T:s3pi.Interfaces.DependentList`1"/>.
            </summary>
            <exception cref="T:System.NotImplementedException"><typeparamref name="T"/> is abstract.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.DependentList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.Add(`0)">
            <summary>
            Adds an entry to a <see cref="T:s3pi.Interfaces.DependentList`1"/>, setting the element change handler.
            </summary>
            <param name="newElement">An instance of type <c>{T}</c> to add to the list.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.DependentList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.Add(System.Type)">
            <summary>
            Add a default element to a <see cref="T:s3pi.Interfaces.DependentList`1"/> of the specified type, <paramref name="elementType"/>.
            </summary>
            <param name="elementType">A concrete type assignable to the list generic type, <typeparamref name="T"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="elementType"/> is abstract.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="elementType"/> is not an implementation of the list type, <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.DependentList`1"/> is read-only.</exception>
            <seealso cref="M:System.Activator.CreateInstance(System.Type,System.Object[])"/>
        </member>
        <member name="M:s3pi.Interfaces.DependentList`1.GetElementType(System.Object[])">
            <summary>
            Return the type to get the constructor from, for the given set of fields.
            </summary>
            <param name="fields">Constructor parameters</param>
            <returns>Class on which to invoke constructor</returns>
            <remarks><paramref name="fields"/>[0] could be an instance of the abstract class: it should provide a constructor that accepts a "template"
            object and creates a new instance on that basis.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.#ctor(System.EventHandler,s3pi.Interfaces.IndexList{`0}.CreateElementMethod,s3pi.Interfaces.IndexList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.IndexList{`0}.ReadCountMethod,s3pi.Interfaces.IndexList{`0}.WriteCountMethod,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.IndexList`1"/> class
            that is empty.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="createElement">Optional; the method to create a new element in the list from a stream.  If null, return default{T}.</param>
            <param name="writeElement">Optional; the method to create a new element in the list from a stream.  No operation if null.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.#ctor(System.EventHandler,System.IO.Stream,s3pi.Interfaces.IndexList{`0}.CreateElementMethod,s3pi.Interfaces.IndexList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.IndexList{`0}.ReadCountMethod,s3pi.Interfaces.IndexList{`0}.WriteCountMethod,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.IndexList`1"/> class
            from <paramref name="s"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> to read for the initial content of the list.</param>
            <param name="createElement">Required; the method to create a new element in the list from a stream.</param>
            <param name="writeElement">Required; the method to create a new element in the list from a stream.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{`0},s3pi.Interfaces.IndexList{`0}.CreateElementMethod,s3pi.Interfaces.IndexList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.IndexList{`0}.ReadCountMethod,s3pi.Interfaces.IndexList{`0}.WriteCountMethod,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.IndexList`1"/> class
            from <paramref name="collection"/>, wrapping each entry in a <see cref="T:s3pi.Interfaces.TGIBlockListIndex`1"/> instance.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="collection">The source to use as the initial content of the list.</param>
            <param name="createElement">Optional; the method to create a new element in the list from a stream.  If null, return default{T}.</param>
            <param name="writeElement">Optional; the method to create a new element in the list from a stream.  No operation if null.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{s3pi.Interfaces.TGIBlockListIndex{`0}},s3pi.Interfaces.IndexList{`0}.CreateElementMethod,s3pi.Interfaces.IndexList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.IndexList{`0}.ReadCountMethod,s3pi.Interfaces.IndexList{`0}.WriteCountMethod,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.IndexList`1"/> class from the existing <paramref name="collection"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="collection">The source to use as the initial content of the list.</param>
            <param name="createElement">Optional; the method to create a new element in the list from a stream.  If null, return default{T}.</param>
            <param name="writeElement">Optional; the method to create a new element in the list from a stream.  No operation if null.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.ReadCount(System.IO.Stream)">
            <summary>
            Return the number of elements to be created.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> being processed.</param>
            <returns>The number of elements to be created.</returns>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.WriteCount(System.IO.Stream,System.Int32)">
            <summary>
            Write the count of list elements to the stream.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to write <paramref name="count"/> to.</param>
            <param name="count">Value to write to <see cref="T:System.IO.Stream"/> <paramref name="s"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.CreateElement(System.IO.Stream)">
            <summary>
            Creates an new list element of type <typeparamref name="T"/> by reading <paramref name="s"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> containing data.</param>
            <returns>New list element.</returns>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.WriteElement(System.IO.Stream,s3pi.Interfaces.TGIBlockListIndex{`0})">
            <summary>
            Writes the value of a list element to <paramref name="s"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> containing data.</param>
            <param name="element">List element for which to write the value to the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Add">
            <summary>
            Add a default element to a <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <exception cref="T:System.NotImplementedException">Lists of abstract classes will fail
            with a NotImplementedException.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Add(`0)">
            <summary>
            Adds an entry to a <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="item">The object to add.</param>
            <returns>True on success</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:s3pi.Interfaces.IndexList`1.Add(`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.BinarySearch(`0)">
            <summary>
                Searches a the entire sorted <see cref="T:s3pi.Interfaces.IndexList`1"/>
                for an element using the default comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="item">
                The object to locate.
            </param>
            <returns>
                The zero-based index of item in the sorted <see cref="T:s3pi.Interfaces.IndexList`1"/>,
                if item is found; otherwise, a negative number that is the bitwise complement
                of the index of the next element that is larger than item or, if there is
                no larger element, the bitwise complement of <see cref="T:s3pi.Interfaces.IndexList`1"/>.Count.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
                or the <see cref="T:System.IComparable"/> interface for type T.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
                Searches a the entire sorted <see cref="T:s3pi.Interfaces.IndexList`1"/>
                for an element using the specified comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="item">
                The object to locate.
            </param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing
                elements.
                <br/>-or-<br/>
                null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of item in the sorted <see cref="T:s3pi.Interfaces.IndexList`1"/>,
                if item is found; otherwise, a negative number that is the bitwise complement
                of the index of the next element that is larger than item or, if there is
                no larger element, the bitwise complement of <see cref="T:s3pi.Interfaces.IndexList`1"/>.Count.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer"/> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
                or the <see cref="T:System.IComparable"/> interface for type T.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
                Searches a range of elements in the sorted <see cref="T:s3pi.Interfaces.IndexList`1"/>
                for an element using the specified comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="index">
                The zero-based starting index of the range to search.
            </param>
            <param name="count">
                The length of the range to search.
            </param>
            <param name="item">
                The object to locate.
            </param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing
                elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of item in the sorted <see cref="T:s3pi.Interfaces.IndexList`1"/>,
                if item is found; otherwise, a negative number that is the bitwise complement
                of the index of the next element that is larger than item or, if there is
                no larger element, the bitwise complement of <see cref="T:s3pi.Interfaces.IndexList`1"/>.Count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer"/> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
                or the <see cref="T:System.IComparable"/> interface for type T.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
                Converts the elements in the current <see cref="T:s3pi.Interfaces.IndexList`1"/> to
                another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">
                The target type of the elements of the <see cref="T:System.Collections.Generic.List`1"/>.
            </typeparam>
            <param name="converter">
                A <see cref="T:System.Converter`2"/> delegate that converts each element from
                one type to another type.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> of the target type containing the converted
                elements from the current <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="converter"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.CopyTo(`0[])">
            <summary>
                Copies the entire <see cref="T:s3pi.Interfaces.IndexList`1"/> to
                a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">
                The one-dimensional System.Array that is the destination of the elements
                copied from <see cref="T:s3pi.Interfaces.IndexList`1"/>. The <see cref="T:System.Array"/> must have
                zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source <see cref="T:s3pi.Interfaces.IndexList`1"/> is
                greater than the number of elements that the destination <paramref name="array"/> can contain.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the entire <see cref="T:s3pi.Interfaces.IndexList`1"/> to
                a compatible one-dimensional array.
            </summary>
            <param name="array">
                The one-dimensional System.Array that is the destination of the elements
                copied from <see cref="T:s3pi.Interfaces.IndexList`1"/>. The <see cref="T:System.Array"/> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="arrayIndex"/> is equal to or greater than the length of array.
            <br/>-or-<br/>
                The number of elements in the source <see cref="T:s3pi.Interfaces.IndexList`1"/> is greater
                than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
                Copies a range of elements from the <see cref="T:s3pi.Interfaces.IndexList`1"/> to
                a compatible one-dimensional array, starting at the specified <paramref name="index"/> of the
                target <paramref name="array"/>.
            </summary>
            <param name="index">
                The zero-based index in the source <see cref="T:s3pi.Interfaces.IndexList`1"/> at
                which copying begins.
            </param>
            <param name="array">
                The one-dimensional System.Array that is the destination of the elements
                copied from <see cref="T:s3pi.Interfaces.IndexList`1"/>. The <see cref="T:System.Array"/> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <param name="count">
                The number of elements to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="arrayIndex"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> is equal to or greater than the <see cref="T:s3pi.Interfaces.IndexList`1"/>.Count
                of the source <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            <br/>-or-<br/>
                <paramref name="arrayIndex"/> is equal to or greater than the length of array.
            <br/>-or-<br/>
                The number of elements from
                <paramref name="index"/> to the end of the source <see cref="T:s3pi.Interfaces.IndexList`1"/> is greater
                than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.</param>
            <returns>true if item is found in the <see cref="T:s3pi.Interfaces.IndexList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Exists(System.Predicate{`0})">
            <summary>
                Determines whether the <see cref="T:s3pi.Interfaces.IndexList`1"/> contains elements
                that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements
                to search for.
            </param>
            <returns>
                true if the <see cref="T:s3pi.Interfaces.IndexList`1"/> contains one or more elements
                that match the conditions defined by the specified predicate; otherwise,
                false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                match is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Find(System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the first occurrence within the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The first element that matches the conditions defined by the specified predicate,
                if found; otherwise, the default value for type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindAll(System.Predicate{`0})">
            <summary>
                Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements
                to search for.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match
                the conditions defined by the specified predicate, if found; otherwise, an
                empty <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindIndex(System.Predicate{`0})">
            <summary>
                Retrieves all the elements that match the conditions defined by the specified predicate.
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the first occurrence within
                the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the first occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that extends
                from the specified index to the last element.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the first occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that starts
                at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindLast(System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the last occurrence within the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The last element that matches the conditions defined by the specified predicate,
                if found; otherwise, the default value for type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the last occurrence within
                the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the last occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that
                extends from the first element to the specified index.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the backward search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the last occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that
                contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the backward search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="action">
            The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:s3pi.Interfaces.IndexList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            <br/>-or-<br/>
            <paramref name="index"/> is greater than <see cref="T:s3pi.Interfaces.IndexList`1"/>.Count.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:s3pi.Interfaces.IndexList`1.Insert(System.Int32,`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.IndexOf(`0,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/>
                that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the search.
            </param>
            <returns>
                The zero-based index of the first occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that extends from index
                to the last element, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/>
                that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <returns>
                The zero-based index of the first occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that
                starts at <paramref name="index"/> and contains <paramref name="count"/> number of elements,
                if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
                <br/>-or-<br/>
                count is less than 0.
                <br/>-or-<br/>
                index and count do not specify a valid section in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.LastIndexOf(`0)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                last occurrence within the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </param>
            <returns>
                The zero-based index of the last occurrence of item within the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>,
                if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.LastIndexOf(`0,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                last occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/>
                that extends from the first element to the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the backward search.
            </param>
            <returns>
                The zero-based index of the last occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that
                extends from the first element and ends at <paramref name="index"/>,
                if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                last occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/>
                that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the backward search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <returns>
                The zero-based index of the last occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/> that
                contains <paramref name="count"/> number of elements and ends at <paramref name="index"/>,
                if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
                <br/>-or-<br/>
                count is less than 0.
                <br/>-or-<br/>
                index and count do not specify a valid section in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of an entry from the <see cref="T:s3pi.Interfaces.IndexList`1"/> with the value given.
            </summary>
            <param name="item">The value to remove from the <see cref="T:s3pi.Interfaces.IndexList`1"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:s3pi.Interfaces.IndexList`1"/>
            otherwise, false. This method also returns false if item is not found in
            the original <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:s3pi.Interfaces.IndexList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:s3pi.Interfaces.IndexList`1"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison"/> caused an error during the sort.
            For example, <paramref name="comparison"/> might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:s3pi.Interfaces.IndexList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in <see cref="T:s3pi.Interfaces.IndexList`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            <br/>-or-<br/>
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            <br/>-or-<br/>
            <paramref name="comparer"/> is null, and an implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/> cannot be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            <br/>-or-<br/>
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.ToArray">
            <summary>
                Copies the elements of the <see cref="T:s3pi.Interfaces.IndexList`1"/> to a new array.
            </summary>
            <returns>
                An array containing copies of the elements of the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </returns>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.TrueForAll(System.Predicate{`0})">
            <summary>
                Determines whether every element in the <see cref="T:s3pi.Interfaces.IndexList`1"/>
                matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.</param>
            <returns>
                true if every element in the <see cref="T:s3pi.Interfaces.IndexList`1"/> matches the
                conditions defined by the specified predicate; otherwise, false. If the list
                has no elements, the return value is true.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.IndexOf(`0)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                first occurrence within the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </param>
            <returns>
                The zero-based index of the first occurrence of item within the entire <see cref="T:s3pi.Interfaces.IndexList`1"/>,
                if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:s3pi.Interfaces.IndexList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:s3pi.Interfaces.IndexList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:s3pi.Interfaces.IndexList`1.ParentTGIBlocks">
            <summary>
            Reference to TGIBlockList into which this is an index.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.IndexList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:s3pi.Interfaces.IndexList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.IndexList`1"/> is read-only.</exception>
        </member>
        <member name="T:s3pi.Interfaces.IndexList`1.Enumerator`1">
            <summary>
            Supports a simple iteration over a generic collection.
            </summary>
            <typeparam name="U">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Enumerator`1.Dispose">
            <summary>
            Releases all resources used by the enumerator.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Enumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:s3pi.Interfaces.IndexList`1.Enumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:s3pi.Interfaces.IndexList`1.Enumerator`1.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.IndexList`1.CreateElementMethod">
            <summary>
            Create a new element of type <typeparamref name="T"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">The <see cref="T:System.IO.Stream"/> from which to read the element data.</param>
            <returns>A new element of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:s3pi.Interfaces.IndexList`1.WriteElementMethod">
            <summary>
            Write an element of type <typeparamref name="T"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">The <see cref="T:System.IO.Stream"/> to which to write the value.</param>
            <param name="value">The value of type <typeparamref name="T"/> to write.</param>
        </member>
        <member name="T:s3pi.Interfaces.IndexList`1.ReadCountMethod">
            <summary>
            Return the number of list elements to read.
            </summary>
            <param name="s">A <see cref="T:System.IO.Stream"/> that may contain the number of elements.</param>
            <returns>The number of list elements to read.</returns>
        </member>
        <member name="T:s3pi.Interfaces.IndexList`1.WriteCountMethod">
            <summary>
            Store the number of elements in the list.
            </summary>
            <param name="s">A <see cref="T:System.IO.Stream"/> to which list elements will be written after the count.</param>
            <param name="count">The number of list elements.</param>
        </member>
        <member name="T:s3pi.Interfaces.ByteIndexList">
            <summary>
            A byte-size use of <see cref="T:s3pi.Interfaces.IndexList`1"/>.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.ByteIndexList.#ctor(System.EventHandler,s3pi.Interfaces.IndexList{System.Byte}.ReadCountMethod,s3pi.Interfaces.IndexList{System.Byte}.WriteCountMethod,System.Int64,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create an empty UIntList.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="size">Optional list size (should be <c>byte.MaxValue</c> or below).</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.ByteIndexList.#ctor(System.EventHandler,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create an empty ByteIndexList, setting the <paramref name="ParentTGIBlocks"/> as passed.
            Defaults will be used for list size limit and Data I/O handlers used for the count.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="ParentTGIBlocks">Default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.ByteIndexList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{System.Byte},s3pi.Interfaces.IndexList{System.Byte}.ReadCountMethod,s3pi.Interfaces.IndexList{System.Byte}.WriteCountMethod,System.Int64,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a UIntList populated from an existing set of values.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="basis">Basis on which to populate the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="size">Optional list size (should be <c>byte.MaxValue</c> or below).</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.ByteIndexList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{System.Byte},s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a ByteIndexList populated from an existing set of values, setting the <paramref name="ParentTGIBlocks"/> as passed.
            There will be no list size limit and default Data I/O handlers will be used for the count.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="basis">Basis on which to populate the list.</param>
            <param name="ParentTGIBlocks">Default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.ByteIndexList.#ctor(System.EventHandler,System.IO.Stream,s3pi.Interfaces.IndexList{System.Byte}.ReadCountMethod,s3pi.Interfaces.IndexList{System.Byte}.WriteCountMethod,System.Int64,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a UIntList populated from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read elements.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="size">Optional list size (should be <c>byte.MaxValue</c> or below).</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.ByteIndexList.#ctor(System.EventHandler,System.IO.Stream,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a ByteIndexList populated from a <see cref="T:System.IO.Stream"/>, setting the <paramref name="ParentTGIBlocks"/> as passed.
            There will be no list size limit and default Data I/O handlers will be used for the count.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read elements.</param>
            <param name="ParentTGIBlocks">Default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="T:s3pi.Interfaces.Int32IndexList">
            <summary>
            <see cref="T:s3pi.Interfaces.IndexList`1"/> with <see cref="T:System.Int32"/> entries.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.Int32IndexList.#ctor(System.EventHandler,System.Int64,s3pi.Interfaces.IndexList{System.Int32}.ReadCountMethod,s3pi.Interfaces.IndexList{System.Int32}.WriteCountMethod,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create an empty UIntList.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="size">Optional list size.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.Int32IndexList.#ctor(System.EventHandler,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create an empty UIntList, setting the <paramref name="ParentTGIBlocks"/> as passed.
            There will be no list size limit and default Data I/O handlers will be used for the count.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="ParentTGIBlocks">Default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.Int32IndexList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{System.Int32},System.Int64,s3pi.Interfaces.IndexList{System.Int32}.ReadCountMethod,s3pi.Interfaces.IndexList{System.Int32}.WriteCountMethod,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a UIntList populated from an existing set of values.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="basis">Basis on which to populate the list.</param>
            <param name="size">Optional list size.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.Int32IndexList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{System.Int32},s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a UIntList populated from an existing set of values, setting the <paramref name="ParentTGIBlocks"/> as passed.
            There will be no list size limit and default Data I/O handlers will be used for the count.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="basis">Basis on which to populate the list.</param>
            <param name="ParentTGIBlocks">Default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.Int32IndexList.#ctor(System.EventHandler,System.IO.Stream,System.Int64,s3pi.Interfaces.IndexList{System.Int32}.ReadCountMethod,s3pi.Interfaces.IndexList{System.Int32}.WriteCountMethod,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a UIntList populated from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read elements.</param>
            <param name="size">Optional list size.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
            <param name="ParentTGIBlocks">Optional; default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="M:s3pi.Interfaces.Int32IndexList.#ctor(System.EventHandler,System.IO.Stream,s3pi.Interfaces.DependentList{s3pi.Interfaces.TGIBlock})">
            <summary>
            Create a UIntList populated from a <see cref="T:System.IO.Stream"/>, setting the <paramref name="ParentTGIBlocks"/> as passed.
            There will be no list size limit and default Data I/O handlers will be used for the count.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read elements.</param>
            <param name="ParentTGIBlocks">Default parent <see cref="T:s3pi.Interfaces.DependentList`1"/> into which elements of this list index.</param>
        </member>
        <member name="T:s3pi.Interfaces.Quaternion">
            <summary>
            Defines a quaternion - the quotient of two vectors.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.#ctor(System.Int32,System.EventHandler)">
            <summary>
            Create a Quaternion { 0, 0, 0, 0 }.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.#ctor(System.Int32,System.EventHandler,System.IO.Stream)">
            <summary>
            Create a Quaternion from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> containing coordinates.</param>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.Quaternion)">
            <summary>
            Create a Quaternion from a given value.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="basis"><see cref="T:s3pi.Interfaces.Quaternion"/> to copy.</param>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.#ctor(System.Int32,System.EventHandler,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a Quaternion { a, b, c, d }.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="a">Q 'a' value.</param>
            <param name="b">Q 'b' value.</param>
            <param name="c">Q 'c' value.</param>
            <param name="d">Q 'd' value.</param>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.UnParse(System.IO.Stream)">
            <summary>
            Write the Quaternion to the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to contain coordinates.</param>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.Equals(s3pi.Interfaces.Quaternion)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.Quaternion"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.Quaternion"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.Quaternion"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:s3pi.Interfaces.Quaternion.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Quaternion.ContentFields">
            <summary>
            The list of available field names on this API object.
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Quaternion.A">
            <summary>
            'a' value
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Quaternion.B">
            <summary>
            'b' value
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Quaternion.C">
            <summary>
            'c' value
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Quaternion.D">
            <summary>
            'd' value
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.Quaternion.Value">
            <summary>
            A displayable representation of the object
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.CountedTGIBlockList">
            <summary>
            A TGIBlock list class where the count of elements is separate from the stored list
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            that is empty
            with <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of "TGI".
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{s3pi.Interfaces.TGIBlock},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            filled with the content of <paramref name="ilt"/>
            with <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of "TGI".
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="ilt">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use as the initial content of the list.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,System.Int32,System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            filled with <paramref name="count"/> elements from <see cref="T:System.IO.Stream"/> <paramref name="s"/>
            with <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of "TGI".
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="count">The number of list elements to read.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> to read for the initial content of the list.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,s3pi.Interfaces.TGIBlock.Order,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            that is empty
            with the specified <see cref="T:s3pi.Interfaces.TGIBlock.Order"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="order">The <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.TGIBlock"/> values.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,s3pi.Interfaces.TGIBlock.Order,System.Collections.Generic.IEnumerable{s3pi.Interfaces.TGIBlock},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            filled with the content of <paramref name="ilt"/>
            with the specified <see cref="T:s3pi.Interfaces.TGIBlock.Order"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="order">The <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.TGIBlock"/> values.</param>
            <param name="ilt">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use as the initial content of the list.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,s3pi.Interfaces.TGIBlock.Order,System.Int32,System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            filled with <paramref name="count"/> elements from <see cref="T:System.IO.Stream"/> <paramref name="s"/>
            with the specified <see cref="T:s3pi.Interfaces.TGIBlock.Order"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="order">The <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.TGIBlock"/> values.</param>
            <param name="count">The number of list elements to read.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> to read for the initial content of the list.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            that is empty
            with the specified <see cref="T:s3pi.Interfaces.TGIBlock.Order"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="order">A string representing the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.TGIBlock"/> values.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,System.String,System.Collections.Generic.IEnumerable{s3pi.Interfaces.TGIBlock},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            filled with the content of <paramref name="ilt"/>
            with the specified <see cref="T:s3pi.Interfaces.TGIBlock.Order"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="order">A string representing the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.TGIBlock"/> values.</param>
            <param name="ilt">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use as the initial content of the list.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.#ctor(System.EventHandler,System.String,System.Int32,System.IO.Stream,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> class
            filled with <paramref name="count"/> elements from <see cref="T:System.IO.Stream"/> <paramref name="s"/>
            with the specified <see cref="T:s3pi.Interfaces.TGIBlock.Order"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="order">A string representing the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.TGIBlock"/> values.</param>
            <param name="count">The number of list elements to read.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> to read for the initial content of the list.</param>
            <param name="size">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.CreateElement(System.IO.Stream)">
            <summary>
            Create a new element from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">Stream containing element data.</param>
            <returns>A new element.</returns>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.WriteElement(System.IO.Stream,s3pi.Interfaces.TGIBlock)">
            <summary>
            Write an element to the stream.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to write <paramref name="element"/> to.</param>
            <param name="element">Value to write to <see cref="T:System.IO.Stream"/> <paramref name="s"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.ReadCount(System.IO.Stream)">
            <summary>
            Return the number of elements to be created.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> being processed -- ignored.</param>
            <returns>The number of elements to be created, as provided to the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> constructor.</returns>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.WriteCount(System.IO.Stream,System.Int32)">
            <summary>
            This list does not manage a count within the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">Ignored.</param>
            <param name="count">Ignored.</param>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.Add">
            <summary>
            Add a new default element to the list.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.Add(s3pi.Interfaces.TGIBlock)">
            <summary>
            Adds a new <see cref="T:s3pi.Interfaces.TGIBlock"/> to the list using the values of the specified <see cref="T:s3pi.Interfaces.TGIBlock"/>.
            </summary>
            <param name="item">The <see cref="T:s3pi.Interfaces.TGIBlock"/> to use as a basis for the new <see cref="T:s3pi.Interfaces.TGIBlock"/>.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
            <remarks>A new element is created rather than using the element passed
            as the order (TGI/ITG/etc) may be different.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.Add(s3pi.Interfaces.IResourceKey)">
            <summary>
            Adds a new TGIBlock to the list using the values of the IResourceKey.
            </summary>
            <param name="rk">The ResourceKey values to use for the TGIBlock.</param>
            <remarks>A new element is created rather than using the element passed
            as the order (TGI/ITG/etc) may be different.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.CountedTGIBlockList.Insert(System.Int32,s3pi.Interfaces.TGIBlock)">
            <summary>
            Inserts a new <see cref="T:s3pi.Interfaces.TGIBlock"/> to the list at the specified index using the values of the specified <see cref="T:s3pi.Interfaces.TGIBlock"/>.
            </summary>
            <param name="index">The zero-based index at which the new <see cref="T:s3pi.Interfaces.TGIBlock"/> should be inserted.</param>
            <param name="item">The <see cref="T:s3pi.Interfaces.TGIBlock"/> to use as a basis for the new <see cref="T:s3pi.Interfaces.TGIBlock"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index
            in the <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> is read-only.</exception>
            <remarks>A new element is created rather than using the element passed
            as the order (TGI/ITG/etc) may be different.</remarks>
        </member>
        <member name="T:s3pi.Interfaces.TGIBlockList">
            <summary>
            A TGIBlock list class where the count and size of the list are stored separately (but managed by this class)
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockList.#ctor(System.EventHandler,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.TGIBlockList"/> class
            that is empty.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="addEight">When true, invoke fudge factor in parse/unparse</param>
            <param name="ignoreTgiSize">When true, the size of TGIBlockList will be ignored (only the entry count will be used).</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{s3pi.Interfaces.TGIBlock},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.TGIBlockList"/> class
            filled with the content of <paramref name="ilt"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="ilt">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use as the initial content of the list.</param>
            <param name="addEight">When true, invoke fudge factor in parse/unparse</param>
            <param name="ignoreTgiSize">When true, the size of TGIBlockList will be ignored (only the entry count will be used).</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockList.#ctor(System.EventHandler,System.IO.Stream,System.Int64,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.TGIBlockList"/> class
            filled with elements from <see cref="T:System.IO.Stream"/> <paramref name="s"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> to read for the initial content of the list.</param>
            <param name="tgiPosn">Position in the <see cref="T:System.IO.Stream"/> where the list of <see cref="T:s3pi.Interfaces.TGIBlock"/>s starts.</param>
            <param name="tgiSize">Size (in bytes) of the stored list.</param>
            <param name="addEight">When true, invoke fudge factor in parse/unparse</param>
            <param name="ignoreTgiSize">When true, the size of TGIBlockList will be ignored (only the entry count will be used).</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockList.CreateElement(System.IO.Stream)">
            <summary>
            Create a new element from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">Stream containing element data.</param>
            <returns>A new element.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockList.WriteElement(System.IO.Stream,s3pi.Interfaces.TGIBlock)">
            <summary>
            Write an element to the stream.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to write <paramref name="element"/> to.</param>
            <param name="element">Value to write to <see cref="T:System.IO.Stream"/> <paramref name="s"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockList.Parse(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Read list entries from a stream
            </summary>
            <param name="s">Stream containing list entries</param>
            <param name="tgiPosn">Position in the <see cref="T:System.IO.Stream"/> where the list of <see cref="T:s3pi.Interfaces.TGIBlock"/>s starts.</param>
            <param name="tgiSize">Size (in bytes) of the stored list.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockList.UnParse(System.IO.Stream,System.Int64)">
            <summary>
            Write list entries to a stream
            </summary>
            <param name="s">Stream to receive list entries</param>
            <param name="ptgiO">Position in <see cref="T:System.IO.Stream"/> to write list position and size values.</param>
        </member>
        <member name="T:s3pi.Interfaces.SimpleList`1">
            <summary>
            A flexible generic list that implements <see cref="T:s3pi.Interfaces.DependentList`1"/> for
            a simple data type (such as <see cref="T:System.UInt32"/>).
            </summary>
            <typeparam name="T">A simple data type (such as <see cref="T:System.UInt32"/>).</typeparam>
            <example>
            The following method shows a way to create a list of UInt32 values, with an Int32 entry count
            stored in the stream immediately before the list.
            <code>
            <![CDATA[
            SimpleList<UInt32> ReadUInt32List(EventHandler e, Stream s)
            {
                return new SimpleList<UInt32>(e, s,
                    s => new BinaryReader(s).ReadUInt32(),
                    (s, value) => new BinaryWriter(s).Write(value));
            }
            ]]>
            </code>
            For more complex cases, or where repeated use of the same kind of <see cref="T:s3pi.Interfaces.SimpleList`1"/> is needed in different contexts,
            it can be worthwhile extending the class, as shown below.  This example is for a list of byte values prefixed
            by a one byte count.  It shows that the list length can also be specified (here using <c>Byte.MaxValue</c>
            <code>
            <![CDATA[
            public class ByteList : SimpleList<Byte>
            {
                public ByteList(EventHandler handler) : base(handler, ReadByte, WriteByte, Byte.MaxValue, ReadListCount, WriteListCount) { }
                public ByteList(EventHandler handler, Stream s) : base(handler, s, ReadByte, WriteByte, Byte.MaxValue, ReadListCount, WriteListCount) { }
                public ByteList(EventHandler handler, IList<Byte> le) : base(handler, le, ReadByte, WriteByte Byte.MaxValue, ReadListCount, WriteListCount) { }
                
                static uint ReadListCount(Stream s) { return new BinaryReader(s).ReadByte(); }
                static void WriteListCount(Stream s, uint count) { new BinaryWriter(s).Write((byte)count); }
                static byte ReadByte(Stream s) { return new BinaryReader(s).ReadByte(); }
                static void WriteByte(Stream s, byte value) { new BinaryWriter(s).Write(value); }
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:s3pi.Interfaces.HandlerElement`1"/>
            <seealso cref="T:s3pi.Interfaces.IndexList`1"/>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.#ctor(System.EventHandler,s3pi.Interfaces.SimpleList{`0}.CreateElementMethod,s3pi.Interfaces.SimpleList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.SimpleList{`0}.ReadCountMethod,s3pi.Interfaces.SimpleList{`0}.WriteCountMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.SimpleList`1"/> class
            that is empty.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="createElement">Optional; the method to create a new element in the list from a stream.  If null, return default{T}.</param>
            <param name="writeElement">Optional; the method to create a new element in the list from a stream.  No operation if null.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.#ctor(System.EventHandler,System.IO.Stream,s3pi.Interfaces.SimpleList{`0}.CreateElementMethod,s3pi.Interfaces.SimpleList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.SimpleList{`0}.ReadCountMethod,s3pi.Interfaces.SimpleList{`0}.WriteCountMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.SimpleList`1"/> class
            from <paramref name="s"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> to read for the initial content of the list.</param>
            <param name="createElement">Required; the method to create a new element in the list from a stream.</param>
            <param name="writeElement">Required; the method to create a new element in the list from a stream.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{`0},s3pi.Interfaces.SimpleList{`0}.CreateElementMethod,s3pi.Interfaces.SimpleList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.SimpleList{`0}.ReadCountMethod,s3pi.Interfaces.SimpleList{`0}.WriteCountMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.SimpleList`1"/> class
            from <paramref name="collection"/>, wrapping each entry in a <see cref="T:s3pi.Interfaces.HandlerElement`1"/> instance.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="collection">The source to use as the initial content of the list.</param>
            <param name="createElement">Optional; the method to create a new element in the list from a stream.  If null, return default{T}.</param>
            <param name="writeElement">Optional; the method to create a new element in the list from a stream.  No operation if null.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{s3pi.Interfaces.HandlerElement{`0}},s3pi.Interfaces.SimpleList{`0}.CreateElementMethod,s3pi.Interfaces.SimpleList{`0}.WriteElementMethod,System.Int64,s3pi.Interfaces.SimpleList{`0}.ReadCountMethod,s3pi.Interfaces.SimpleList{`0}.WriteCountMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:s3pi.Interfaces.SimpleList`1"/> class from the existing <paramref name="collection"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list or its elements.</param>
            <param name="collection">The source to use as the initial content of the list.</param>
            <param name="createElement">Optional; the method to create a new element in the list from a stream.  If null, return default{T}.</param>
            <param name="writeElement">Optional; the method to create a new element in the list from a stream.  No operation if null.</param>
            <param name="size">Optional maximum number of elements in the list.</param>
            <param name="readCount">Optional; default is to read a <see cref="T:System.Int32"/> from the <see cref="T:System.IO.Stream"/>.</param>
            <param name="writeCount">Optional; default is to write a <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.ReadCount(System.IO.Stream)">
            <summary>
            Return the number of elements to be created.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> being processed.</param>
            <returns>The number of elements to be created.</returns>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.WriteCount(System.IO.Stream,System.Int32)">
            <summary>
            Write the count of list elements to the stream.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to write <paramref name="count"/> to.</param>
            <param name="count">Value to write to <see cref="T:System.IO.Stream"/> <paramref name="s"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.CreateElement(System.IO.Stream)">
            <summary>
            Creates an new list element of type <typeparamref name="T"/> by reading <paramref name="s"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> containing data.</param>
            <returns>New list element.</returns>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.WriteElement(System.IO.Stream,s3pi.Interfaces.HandlerElement{`0})">
            <summary>
            Writes the value of a list element to <paramref name="s"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> containing data.</param>
            <param name="element">List element for which to write the value to the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Add">
            <summary>
            Add a default element to a <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <exception cref="T:System.NotImplementedException">Lists of abstract classes will fail
            with a NotImplementedException.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Add(`0)">
            <summary>
            Adds an entry to a <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="item">The object to add.</param>
            <returns>True on success</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:s3pi.Interfaces.SimpleList`1.Add(`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.BinarySearch(`0)">
            <summary>
                Searches a the entire sorted <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                for an element using the default comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="item">
                The object to locate.
            </param>
            <returns>
                The zero-based index of item in the sorted <see cref="T:s3pi.Interfaces.SimpleList`1"/>,
                if item is found; otherwise, a negative number that is the bitwise complement
                of the index of the next element that is larger than item or, if there is
                no larger element, the bitwise complement of <see cref="T:s3pi.Interfaces.SimpleList`1"/>.Count.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
                or the <see cref="T:System.IComparable"/> interface for type T.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
                Searches a the entire sorted <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                for an element using the specified comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="item">
                The object to locate.
            </param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing
                elements.
                <br/>-or-<br/>
                null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of item in the sorted <see cref="T:s3pi.Interfaces.SimpleList`1"/>,
                if item is found; otherwise, a negative number that is the bitwise complement
                of the index of the next element that is larger than item or, if there is
                no larger element, the bitwise complement of <see cref="T:s3pi.Interfaces.SimpleList`1"/>.Count.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer"/> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
                or the <see cref="T:System.IComparable"/> interface for type T.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
                Searches a range of elements in the sorted <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                for an element using the specified comparer and returns the zero-based index
                of the element.
            </summary>
            <param name="index">
                The zero-based starting index of the range to search.
            </param>
            <param name="count">
                The length of the range to search.
            </param>
            <param name="item">
                The object to locate.
            </param>
            <param name="comparer">
                The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing
                elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.
            </param>
            <returns>
                The zero-based index of item in the sorted <see cref="T:s3pi.Interfaces.SimpleList`1"/>,
                if item is found; otherwise, a negative number that is the bitwise complement
                of the index of the next element that is larger than item or, if there is
                no larger element, the bitwise complement of <see cref="T:s3pi.Interfaces.SimpleList`1"/>.Count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
                <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> and <paramref name="count"/> do not denote a valid range in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="comparer"/> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
                cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
                or the <see cref="T:System.IComparable"/> interface for type T.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
                Converts the elements in the current <see cref="T:s3pi.Interfaces.SimpleList`1"/> to
                another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">
                The target type of the elements of the <see cref="T:System.Collections.Generic.List`1"/>.
            </typeparam>
            <param name="converter">
                A <see cref="T:System.Converter`2"/> delegate that converts each element from
                one type to another type.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> of the target type containing the converted
                elements from the current <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="converter"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.CopyTo(`0[])">
            <summary>
                Copies the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/> to
                a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">
                The one-dimensional System.Array that is the destination of the elements
                copied from <see cref="T:s3pi.Interfaces.SimpleList`1"/>. The <see cref="T:System.Array"/> must have
                zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source <see cref="T:s3pi.Interfaces.SimpleList`1"/> is
                greater than the number of elements that the destination <paramref name="array"/> can contain.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/> to
                a compatible one-dimensional array.
            </summary>
            <param name="array">
                The one-dimensional System.Array that is the destination of the elements
                copied from <see cref="T:s3pi.Interfaces.SimpleList`1"/>. The <see cref="T:System.Array"/> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="arrayIndex"/> is equal to or greater than the length of array.
            <br/>-or-<br/>
                The number of elements in the source <see cref="T:s3pi.Interfaces.SimpleList`1"/> is greater
                than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
                Copies a range of elements from the <see cref="T:s3pi.Interfaces.SimpleList`1"/> to
                a compatible one-dimensional array, starting at the specified <paramref name="index"/> of the
                target <paramref name="array"/>.
            </summary>
            <param name="index">
                The zero-based index in the source <see cref="T:s3pi.Interfaces.SimpleList`1"/> at
                which copying begins.
            </param>
            <param name="array">
                The one-dimensional System.Array that is the destination of the elements
                copied from <see cref="T:s3pi.Interfaces.SimpleList`1"/>. The <see cref="T:System.Array"/> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <param name="count">
                The number of elements to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="arrayIndex"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="index"/> is equal to or greater than the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.Count
                of the source <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            <br/>-or-<br/>
                <paramref name="arrayIndex"/> is equal to or greater than the length of array.
            <br/>-or-<br/>
                The number of elements from
                <paramref name="index"/> to the end of the source <see cref="T:s3pi.Interfaces.SimpleList`1"/> is greater
                than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.</param>
            <returns>true if item is found in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Exists(System.Predicate{`0})">
            <summary>
                Determines whether the <see cref="T:s3pi.Interfaces.SimpleList`1"/> contains elements
                that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements
                to search for.
            </param>
            <returns>
                true if the <see cref="T:s3pi.Interfaces.SimpleList`1"/> contains one or more elements
                that match the conditions defined by the specified predicate; otherwise,
                false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                match is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Find(System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the first occurrence within the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The first element that matches the conditions defined by the specified predicate,
                if found; otherwise, the default value for type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindAll(System.Predicate{`0})">
            <summary>
                Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements
                to search for.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match
                the conditions defined by the specified predicate, if found; otherwise, an
                empty <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindIndex(System.Predicate{`0})">
            <summary>
                Retrieves all the elements that match the conditions defined by the specified predicate.
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the first occurrence within
                the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the first occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that extends
                from the specified index to the last element.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the first occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that starts
                at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the first occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindLast(System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the last occurrence within the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The last element that matches the conditions defined by the specified predicate,
                if found; otherwise, the default value for type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the last occurrence within
                the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the last occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that
                extends from the first element to the specified index.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the backward search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
                Searches for an element that matches the conditions defined by the specified
                predicate, and returns the zero-based index of the last occurrence within
                the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that
                contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">
                The zero-based starting index of the backward search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <param name="match">
                The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element
                to search for.
            </param>
            <returns>
                The zero-based index of the last occurrence of an element that matches the
                conditions defined by <paramref name="match"/>, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="match"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            <br/>-or-<br/>
                <paramref name="count"/> is less than 0.
            <br/>-or-<br/>
                <paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="action">
            The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="action"/> is null.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:s3pi.Interfaces.SimpleList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            <br/>-or-<br/>
            <paramref name="index"/> is greater than <see cref="T:s3pi.Interfaces.SimpleList`1"/>.Count.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:s3pi.Interfaces.SimpleList`1.Insert(System.Int32,`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.IndexOf(`0,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                that extends from the specified index to the last element.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the search.
            </param>
            <returns>
                The zero-based index of the first occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that extends from index
                to the last element, if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                first occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <returns>
                The zero-based index of the first occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that
                starts at <paramref name="index"/> and contains <paramref name="count"/> number of elements,
                if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
                <br/>-or-<br/>
                count is less than 0.
                <br/>-or-<br/>
                index and count do not specify a valid section in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.LastIndexOf(`0)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                last occurrence within the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </param>
            <returns>
                The zero-based index of the last occurrence of item within the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>,
                if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.LastIndexOf(`0,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                last occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                that extends from the first element to the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the backward search.
            </param>
            <returns>
                The zero-based index of the last occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that
                extends from the first element and ends at <paramref name="index"/>,
                if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                last occurrence within the range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </param>
            <param name="index">
                The zero-based starting index of the backward search.
            </param>
            <param name="count">
                The number of elements in the section to search.
            </param>
            <returns>
                The zero-based index of the last occurrence of item within the range of
                elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> that
                contains <paramref name="count"/> number of elements and ends at <paramref name="index"/>,
                if found; otherwise, –1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                index is outside the range of valid indexes for the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
                <br/>-or-<br/>
                count is less than 0.
                <br/>-or-<br/>
                index and count do not specify a valid section in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of an entry from the <see cref="T:s3pi.Interfaces.SimpleList`1"/> with the value given.
            </summary>
            <param name="item">The value to remove from the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:s3pi.Interfaces.SimpleList`1"/>
            otherwise, false. This method also returns false if item is not found in
            the original <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison"/> caused an error during the sort.
            For example, <paramref name="comparison"/> might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>
            cannot find implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in <see cref="T:s3pi.Interfaces.SimpleList`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            <br/>-or-<br/>
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            <br/>-or-<br/>
            <paramref name="comparer"/> is null, and an implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the <see cref="T:System.IComparable"/> interface for type <typeparamref name="T"/> cannot be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            <br/>-or-<br/>
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.ToArray">
            <summary>
                Copies the elements of the <see cref="T:s3pi.Interfaces.SimpleList`1"/> to a new array.
            </summary>
            <returns>
                An array containing copies of the elements of the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </returns>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.TrueForAll(System.Predicate{`0})">
            <summary>
                Determines whether every element in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>
                matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.</param>
            <returns>
                true if every element in the <see cref="T:s3pi.Interfaces.SimpleList`1"/> matches the
                conditions defined by the specified predicate; otherwise, false. If the list
                has no elements, the return value is true.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.IndexOf(`0)">
            <summary>
                Searches for the specified object and returns the zero-based index of the
                first occurrence within the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </summary>
            <param name="item">
                The object to locate in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.
            </param>
            <returns>
                The zero-based index of the first occurrence of item within the entire <see cref="T:s3pi.Interfaces.SimpleList`1"/>,
                if found; otherwise, –1.
            </returns>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:s3pi.Interfaces.SimpleList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:s3pi.Interfaces.SimpleList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:s3pi.Interfaces.SimpleList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:s3pi.Interfaces.SimpleList`1"/> is read-only.</exception>
        </member>
        <member name="T:s3pi.Interfaces.SimpleList`1.Enumerator`1">
            <summary>
            Supports a simple iteration over a generic collection.
            </summary>
            <typeparam name="U">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Enumerator`1.Dispose">
            <summary>
            Releases all resources used by the enumerator.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Enumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element;
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:s3pi.Interfaces.SimpleList`1.Enumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:s3pi.Interfaces.SimpleList`1.Enumerator`1.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.SimpleList`1.CreateElementMethod">
            <summary>
            Create a new element of type <typeparamref name="T"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">The <see cref="T:System.IO.Stream"/> from which to read the element data.</param>
            <returns>A new element of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:s3pi.Interfaces.SimpleList`1.WriteElementMethod">
            <summary>
            Write an element of type <typeparamref name="T"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">The <see cref="T:System.IO.Stream"/> to which to write the value.</param>
            <param name="value">The value of type <typeparamref name="T"/> to write.</param>
        </member>
        <member name="T:s3pi.Interfaces.SimpleList`1.ReadCountMethod">
            <summary>
            Return the number of list elements to read.
            </summary>
            <param name="s">A <see cref="T:System.IO.Stream"/> that may contain the number of elements.</param>
            <returns>The number of list elements to read.</returns>
        </member>
        <member name="T:s3pi.Interfaces.SimpleList`1.WriteCountMethod">
            <summary>
            Store the number of elements in the list.
            </summary>
            <param name="s">A <see cref="T:System.IO.Stream"/> to which list elements will be written after the count.</param>
            <param name="count">The number of list elements.</param>
        </member>
        <member name="T:s3pi.Interfaces.UIntList">
            <summary>
            Commonly used simple list.  The list count is an integer stored immediately before the list.  The elements are UInt32.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.UIntList.#ctor(System.EventHandler,System.Int64)">
            <summary>
            Create an empty UIntList.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="size">Optional list size.</param>
        </member>
        <member name="M:s3pi.Interfaces.UIntList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{System.UInt32},System.Int64)">
            <summary>
            Create a UIntList populated from an existing set of values.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="basis">Basis on which to populate the list.</param>
            <param name="size">Optional list size.</param>
        </member>
        <member name="M:s3pi.Interfaces.UIntList.#ctor(System.EventHandler,System.IO.Stream,System.Int64)">
            <summary>
            Create a UIntList populated from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read elements.</param>
            <param name="size">Optional list size.</param>
        </member>
        <member name="T:s3pi.Interfaces.IntList">
            <summary>
            Commonly used simple list.  The list count is an integer stored immediately before the list.  The elements are Int32.
            </summary>
            <seealso cref="T:s3pi.Interfaces.Int32IndexList"/>
        </member>
        <member name="M:s3pi.Interfaces.IntList.#ctor(System.EventHandler,System.Int64)">
            <summary>
            Create an empty IntList.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="size">Optional list size.</param>
        </member>
        <member name="M:s3pi.Interfaces.IntList.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{System.Int32},System.Int64)">
            <summary>
            Create an IntList populated from an existing set of values.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="basis">Basis on which to populate the list.</param>
            <param name="size">Optional list size.</param>
        </member>
        <member name="M:s3pi.Interfaces.IntList.#ctor(System.EventHandler,System.IO.Stream,System.Int64)">
            <summary>
            Create an IntList populated from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read elements.</param>
            <param name="size">Optional list size.</param>
        </member>
        <member name="T:s3pi.Interfaces.ElementPriorityAttribute">
            <summary>
            Element priority is used when displaying elements
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.ElementPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Element priority is used when displaying elements
            </summary>
            <param name="priority">Element priority, lower values are higher priority</param>
        </member>
        <member name="M:s3pi.Interfaces.ElementPriorityAttribute.GetPriority(System.Type,System.String)">
            <summary>
            Return the ElementPriority value for a Content Field.
            </summary>
            <param name="t">Type on which Content Field exists.</param>
            <param name="index">Content Field name.</param>
            <returns>The value of the ElementPriorityAttribute Priority field, if found;
            otherwise Int32.MaxValue.</returns>
        </member>
        <member name="P:s3pi.Interfaces.ElementPriorityAttribute.Priority">
            <summary>
            Element priority, lower values are higher priority
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.TGIBlock">
            <summary>
            An implementation of AResourceKey that supports storing the Type, Group and Instance in any order.
            </summary>
            <remarks>An explicit implementation of <see cref="T:System.IEquatable`1"/> is required by
            <see cref="T:s3pi.Interfaces.CountedTGIBlockList"/> and <see cref="T:s3pi.Interfaces.TGIBlockList"/>.</remarks>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.TGIBlock)">
            <summary>
            Initialize a new TGIBlock
            with the order and values
            based on <paramref name="basis"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="basis">The TGIBlock to use for the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> and <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler)">
            <summary>
            Initialize a new TGIBlock
            with the default order ("TGI").
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,System.String)">
            <summary>
            Initialize a new TGIBlock
            with the specified order.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">A <see cref="T:System.String"/> representing the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> to use to store the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.TGIBlock.Order)">
            <summary>
            Initialize a new TGIBlock
            with the specified order.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">The <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> to use to store the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            Initialize a new TGIBlock
            with the default order ("TGI") and specified values.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="resourceType">The resource type value.</param>
            <param name="resourceGroup">The resource group value.</param>
            <param name="instance">The resource instance value.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,System.String,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            Initialize a new TGIBlock
            with the specified order and values.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">A <see cref="T:System.String"/> representing the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> to use to store the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
            <param name="resourceType">The resource type value.</param>
            <param name="resourceGroup">The resource group value.</param>
            <param name="instance">The resource instance value.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.TGIBlock.Order,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            Initialize a new TGIBlock
            with the specified order and values.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">The <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> to use to store the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
            <param name="resourceType">The resource type value.</param>
            <param name="resourceGroup">The resource group value.</param>
            <param name="instance">The resource instance value.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.IResourceKey)">
            <summary>
            Initialize a new TGIBlock
            with the default order ("TGI") and specified <see cref="T:s3pi.Interfaces.IResourceKey"/> values.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="rk">The <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,System.String,s3pi.Interfaces.IResourceKey)">
            <summary>
            Initialize a new TGIBlock
            with the specified order and <see cref="T:s3pi.Interfaces.IResourceKey"/> values.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">A <see cref="T:System.String"/> representing the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> to use to store the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
            <param name="rk">The <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.TGIBlock.Order,s3pi.Interfaces.IResourceKey)">
            <summary>
            Initialize a new TGIBlock
            with the specified order and <see cref="T:s3pi.Interfaces.IResourceKey"/> values.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">The <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> to use to store the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
            <param name="rk">The <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,System.IO.Stream)">
            <summary>
            Initialize a new TGIBlock
            with the default order ("TGI") and values read from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> from which to read the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,System.String,System.IO.Stream)">
            <summary>
            Initialize a new TGIBlock
            with the specified order and values read from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">A <see cref="T:System.String"/> representing the <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> from which to read the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.#ctor(System.Int32,System.EventHandler,s3pi.Interfaces.TGIBlock.Order,System.IO.Stream)">
            <summary>
            Initialize a new TGIBlock
            with the specified order and values read from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="APIversion">The requested API version.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:s3pi.Interfaces.AHandlerElement"/> changes.</param>
            <param name="order">The <see cref="T:s3pi.Interfaces.TGIBlock.Order"/> of the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
            <param name="s">The <see cref="T:System.IO.Stream"/> from which to read the <see cref="T:s3pi.Interfaces.IResourceKey"/> values.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.Parse(System.IO.Stream)">
            <summary>
            Used by the <see cref="T:s3pi.Interfaces.TGIBlock"/> constructor to inialise a new <see cref="T:s3pi.Interfaces.TGIBlock"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> containing <see cref="T:s3pi.Interfaces.TGIBlock"/> values in known order.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.UnParse(System.IO.Stream)">
            <summary>
            Writes the <see cref="T:s3pi.Interfaces.TGIBlock"/> to the specified <see cref="T:System.IO.Stream"/> in known order.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to write <see cref="T:s3pi.Interfaces.TGIBlock"/> values to.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlock.Equals(s3pi.Interfaces.TGIBlock)">
            <summary>
            Indicates whether the current <see cref="T:s3pi.Interfaces.TGIBlock"/> instance is equal to another <see cref="T:s3pi.Interfaces.TGIBlock"/> instance.
            </summary>
            <param name="other">An <see cref="T:s3pi.Interfaces.TGIBlock"/> instance to compare with this instance.</param>
            <returns>true if the current instance is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlock.ContentFields">
            <summary>
            The list of available field names on this API object
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlock.RecommendedApiVersion">
            <summary>
            The best supported version of the API available
            </summary>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlock.Value">
            <summary>
            A display-ready string representing the <see cref="T:s3pi.Interfaces.TGIBlock"/>.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.TGIBlock.Order">
            <summary>
            Options for the order of the Type, Group and Instance elements of a TGIBlock
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TGIBlock.Order.TGI">
            <summary>
            Type, Group, Instance
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TGIBlock.Order.TIG">
            <summary>
            Type, Instance, Group
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TGIBlock.Order.GTI">
            <summary>
            Group, Type, Instance
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TGIBlock.Order.GIT">
            <summary>
            Group, Instance, Type
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TGIBlock.Order.ITG">
            <summary>
            Instance, Type, Group
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TGIBlock.Order.IGT">
            <summary>
            Instance, Group, Type
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.TGIBlockListContentFieldAttribute">
            <summary>
            Indicates that the element should be expandable rather than requiring a popup
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListContentFieldAttribute.#ctor(System.String)">
            <summary>
            Attaches a TGIBlockList to an Index ContentField.
            </summary>
            <param name="value">The TGIBlockList to which this ContentField Property applies.</param>
        </member>
        <member name="M:s3pi.Interfaces.TGIBlockListContentFieldAttribute.GetTGIBlockListContentField(System.Type,System.String)">
            <summary>
            Return the TGIBlockListContentField value for a Content Field.
            </summary>
            <param name="t">Type on which Content Field exists.</param>
            <param name="index">Content Field name.</param>
            <returns>The value of the TGIBlockListContentFieldAttribute TGIBlockListContentField field, if found;
            otherwise <c>null</c>.</returns>
        </member>
        <member name="P:s3pi.Interfaces.TGIBlockListContentFieldAttribute.TGIBlockListContentField">
            <summary>
            The TGIBlockList to which this ContentField Property applies.
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.TypedValue">
            <summary>
            A tuple associating a data type (or class) with a value object (of the given type)
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TypedValue.Type">
            <summary>
            The data type
            </summary>
        </member>
        <member name="F:s3pi.Interfaces.TypedValue.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.#ctor(System.Type,System.Object)">
            <summary>
            Create a new <see cref="T:s3pi.Interfaces.TypedValue"/>
            </summary>
            <param name="t">The data type</param>
            <param name="v">The value</param>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.#ctor(System.Type,System.Object,System.String)">
            <summary>
            Create a new <see cref="T:s3pi.Interfaces.TypedValue"/>
            </summary>
            <param name="t">The data type</param>
            <param name="v">The value</param>
            <param name="f">The default format for <see cref="M:s3pi.Interfaces.TypedValue.ToString"/></param>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.op_Implicit(s3pi.Interfaces.TypedValue)~System.String">
            <summary>
            Return a string representing the <see cref="T:s3pi.Interfaces.TypedValue"/>
            <paramref name="tv"/>.
            </summary>
            <param name="tv">The value to convert.</param>
            <returns>A string representing <paramref name="tv"/>.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToString">
            <summary>
            Return the Value as a string using the default format
            </summary>
            <returns>String representation of Value in default format</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToString(System.String)">
            <summary>
            Return the Value as a string using the given format
            </summary>
            <param name="format">Format to use for result</param>
            <returns>String representation of Value in given format</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.CompareTo(s3pi.Interfaces.TypedValue)">
            <summary>
            Compare this <see cref="T:s3pi.Interfaces.TypedValue"/> to another for sort order purposes
            </summary>
            <param name="other">Target <see cref="T:s3pi.Interfaces.TypedValue"/></param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.  The return value has these meanings:
            <table>
            <thead><tr><td><strong>Value</strong></td><td><strong>Meaning</strong></td></tr></thead>
            <tbody>
            <tr><td>Less than zero</td><td>This instance is less than <paramref name="other"/>.</td></tr>
            <tr><td>Zero</td><td>This instance is equal to <paramref name="other"/>.</td></tr>
            <tr><td>Greater than zero</td><td>This instance is greater than <paramref name="other"/>.</td></tr>
            </tbody>
            </table>
            </returns>
            <exception cref="T:System.NotImplementedException">Either this object's Type or the target's is not comparable</exception>
            <exception cref="T:System.ArgumentException">The target is not comparable with this object</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.Equals(s3pi.Interfaces.TypedValue,s3pi.Interfaces.TypedValue)">
            <summary>
            Determines whether the specified <see cref="T:s3pi.Interfaces.TypedValue"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:s3pi.Interfaces.TypedValue"/> to compare.</param>
            <param name="y">The second <see cref="T:s3pi.Interfaces.TypedValue"/> to compare.</param>
            <returns>true if the specified <see cref="T:s3pi.Interfaces.TypedValue"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.GetHashCode(s3pi.Interfaces.TypedValue)">
            <summary>
            Returns a hash code for the specified <see cref="T:s3pi.Interfaces.TypedValue"/>.
            </summary>
            <param name="obj">The <see cref="T:s3pi.Interfaces.TypedValue"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and
            <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.Equals(s3pi.Interfaces.TypedValue)">
            <summary>
            Indicates whether the current <see cref="T:s3pi.Interfaces.TypedValue"/> instance is equal to another <see cref="T:s3pi.Interfaces.TypedValue"/> instance.
            </summary>
            <param name="other">An <see cref="T:s3pi.Interfaces.TypedValue"/> instance to compare with this instance.</param>
            <returns>true if the current instance is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.TypedValue"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:s3pi.Interfaces.TypedValue"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:s3pi.Interfaces.TypedValue"/>; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>The enumerated constant that is the <see cref="T:System.TypeCode"/> of the <see cref="T:s3pi.Interfaces.TypedValue"/> class.</returns>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Boolean"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Boolean"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Byte"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Byte"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Byte"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Char"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Char"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Char"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.DateTime"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Decimal"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Double"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Double"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Double"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Int16"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Int16"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Int16"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Int32"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Int32"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Int32"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Int64"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Int64"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Int64"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.SByte"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.SByte"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.SByte"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Single"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Single"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.Single"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="F:s3pi.Interfaces.TypedValue.Type"/>
            that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="F:s3pi.Interfaces.TypedValue.Type"/> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <paramref name="conversionType"/> object.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.UInt16"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.UInt16"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.UInt16"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.UInt32"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.UInt32"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.UInt32"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.UInt64"/> value
            (ignoring the specified culture-specific formatting information).
            </summary>
            <param name="provider">(unused, may be null) An <see cref="T:System.IFormatProvider"/> interface implementation
            that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.UInt64"/> value equivalent to the value of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the <see cref="T:s3pi.Interfaces.TypedValue"/> value
            cannot be assigned to a <see cref="T:System.UInt64"/>.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the value cannot be cloned.</exception>
        </member>
        <member name="M:s3pi.Interfaces.TypedValue.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="T:s3pi.Interfaces.VersionAttribute">
            <summary>
            Base class for versioning support.  Not directly used by the API.
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.VersionAttribute.#ctor(System.Int32)">
            <summary>
            Version number attribute (base)
            </summary>
            <param name="Version">Version number</param>
        </member>
        <member name="P:s3pi.Interfaces.VersionAttribute.Version">
            <summary>
            Version number
            </summary>
        </member>
        <member name="T:s3pi.Interfaces.MinimumVersionAttribute">
            <summary>
            Specify the Minumum version from which a field or method is supported
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.MinimumVersionAttribute.#ctor(System.Int32)">
            <summary>
            Specify the Minumum version from which a field or method is supported
            </summary>
            <param name="Version">Version number</param>
        </member>
        <member name="T:s3pi.Interfaces.MaximumVersionAttribute">
            <summary>
            Specify the Maximum version up to which a field or method is supported
            </summary>
        </member>
        <member name="M:s3pi.Interfaces.MaximumVersionAttribute.#ctor(System.Int32)">
            <summary>
            Specify the Maximum version up to which a field or method is supported
            </summary>
            <param name="Version">Version number</param>
        </member>
    </members>
</doc>
