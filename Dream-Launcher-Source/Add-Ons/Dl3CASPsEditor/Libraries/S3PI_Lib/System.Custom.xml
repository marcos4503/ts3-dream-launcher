<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Custom</name>
    </assembly>
    <members>
        <member name="T:System.ArgumentLengthException">
            <summary>
            Represents an error in the length of an argument to a method
            </summary>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class.
            </summary>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class with a predefined message based on
            <paramref name="argument"/> and <paramref name="length"/>.
            </summary>
            <param name="argument">Name of the method argument in error</param>
            <param name="length">Valid length of the argument</param>
        </member>
        <member name="M:System.ArgumentLengthException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the System.ArgumentLengthException class with a formatted error message.
            See <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="format">format string</param>
            <param name="formatparams">format string substitutions</param>
        </member>
        <member name="T:System.Collections.Generic.AHandlerList`1">
            <summary>
            Abstract extension of <see cref="T:System.Collections.Generic.List`1"/>
            providing feedback on list updates through the supplied <see cref="T:System.EventHandler"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of list element</typeparam>
        </member>
        <member name="F:System.Collections.Generic.AHandlerList`1.handler">
            <summary>
            Holds the <see cref="T:System.EventHandler"/> delegate to invoke if the <see cref="T:System.Collections.Generic.AHandlerList`1"/> changes.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.AHandlerList`1.maxSize">
            <summary>
            The maximum size of the list, or -1 for no limit.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.#ctor(System.EventHandler,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.AHandlerList`1"/> class
            that is empty
            and with maximum size of <paramref name="maxSize"/> (default is unlimited).
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list.</param>
            <param name="maxSize">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.#ctor(System.EventHandler,System.Collections.Generic.IEnumerable{`0},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.AHandlerList`1"/> class,
            filled with the content of <paramref name="ilt"/>.
            </summary>
            <param name="handler">The <see cref="T:System.EventHandler"/> to call on changes to the list.</param>
            <param name="ilt">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use as the initial content of the list.</param>
            <param name="maxSize">Optional; -1 for unlimited size, otherwise the maximum number of elements in the list.</param>
            <remarks>Does not throw an exception if <paramref name="ilt"/>.Count is greater than <paramref name="maxSize"/>.
            An exception will be thrown on any attempt to add further items unless the Count is reduced first.</remarks>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:System.Collections.Generic.AHandlerList`1.Add(`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.AHandlerList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            The collection itself cannot be null, but it can contain elements that are null, if type <typeparamref name="T"/> is a reference type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="T:System.Collections.Generic.AHandlerList`1"/>.Count.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size would be exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
            <remarks>Calls <see cref="M:System.Collections.Generic.AHandlerList`1.Insert(System.Int32,`0)"/> for each item in <paramref name="collection"/>.</remarks>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The System.Predicate{T} delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="T:System.Collections.Generic.AHandlerList`1"/>.Count.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="index"/> is greater than <see cref="T:System.Collections.Generic.AHandlerList`1"/>.Count.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the default comparer.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default
            cannot find an implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison"/> caused an error during the sort.
            For example, <paramref name="comparison"/> might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default.</param>
            <exception cref="T:System.ArgumentException">
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default
            cannot find implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.AHandlerList`1"/> using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements,
            or null to use the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            -or-
            The implementation of <paramref name="comparer"/> caused an error during the sort.
            For example, <paramref name="comparer"/> might not return 0 when comparing an item with itself.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0.
            -or-
            <paramref name="count"/> is less than 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer"/> is null, and the default comparer <see cref="T:System.Collections.Generic.Comparer`1"/>.Default
            cannot find implementation of the <see cref="T:System.IComparable`1"/> generic interface
            or the System.IComparable interface for type <typeparamref name="T"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.AHandlerList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.AHandlerList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Add(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when list size exceeded.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.AHandlerList`1"/>
            otherwise, false. This method also returns false if item is not found in
            the original <see cref="T:System.Collections.Generic.AHandlerList`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.OnListChanged">
            <summary>
            Invokes the list change event handler.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AHandlerList`1.Equals(System.Collections.Generic.AHandlerList{`0})">
            <summary>
            Determine whether this list is equal to <paramref name="target"/>.
            </summary>
            <param name="target">A <see cref="T:System.Collections.Generic.AHandlerList`1"/> against which to test this list for equality.</param>
            <returns>True if this list is equal to <paramref name="target"/>; otherwise false.</returns>
        </member>
        <member name="P:System.Collections.Generic.AHandlerList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.AHandlerList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.AHandlerList`1"/> is read-only.</exception>
        </member>
        <member name="P:System.Collections.Generic.AHandlerList`1.MaxSize">
            <summary>
            The maximum size of the list, or -1 for no limit (read-only).
            </summary>
        </member>
        <member name="T:System.Extensions">
            <summary>
            Useful Extension Methods not provided by Linq (and without deferred execution).
            </summary>
        </member>
        <member name="M:System.Extensions.ConvertAll``1(System.Array)">
            <summary>
            Convert all elements of an <c>Array</c> to <typeparamref name="TOut"/>.
            </summary>
            <typeparam name="TOut">The output element type.</typeparam>
            <param name="array">The input array</param>
            <returns>An <c>TOut[]</c> array containing converted input elements.</returns>
            <exception cref="T:System.InvalidCastException">The element type of <paramref name="array"/> does not provide the <c>IConvertible</c> interface.</exception>
        </member>
        <member name="M:System.Extensions.ConvertAll``1(System.Array,System.IFormatProvider)">
            <summary>
            Convert all elements of an <c>Array</c> to <typeparamref name="TOut"/>.
            </summary>
            <typeparam name="TOut">The output element type.</typeparam>
            <param name="array">The input array</param>
            <param name="provider">An <c>System.IFormatProvider</c> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <c>TOut[]</c> array containing converted input elements.</returns>
            <exception cref="T:System.InvalidCastException">The element type of <paramref name="array"/> does not provide the <c>IConvertible</c> interface.</exception>
        </member>
        <member name="M:System.Extensions.ConvertAll``1(System.Array,System.Int32)">
            <summary>
            Convert elements of an <c>Array</c> to <typeparamref name="TOut"/>,
            starting at <paramref name="start"/>.
            </summary>
            <typeparam name="TOut">The output element type.</typeparam>
            <param name="array">The input array</param>
            <param name="start">The offset into <paramref name="array"/> from which to start creating the output.</param>
            <returns>An <c>TOut[]</c> array containing converted input elements.</returns>
            <exception cref="T:System.InvalidCastException">The element type of <paramref name="array"/> does not provide the <c>IConvertible</c> interface.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="start"/> is outside the bounds of <paramref name="array"/>.</exception>
        </member>
        <member name="M:System.Extensions.ConvertAll``1(System.Array,System.Int32,System.IFormatProvider)">
            <summary>
            Convert elements of an <c>Array</c> to <typeparamref name="TOut"/>,
            starting at <paramref name="start"/>.
            </summary>
            <typeparam name="TOut">The output element type.</typeparam>
            <param name="array">The input array</param>
            <param name="start">The offset into <paramref name="array"/> from which to start creating the output.</param>
            <param name="provider">An <c>System.IFormatProvider</c> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <c>TOut[]</c> array containing converted input elements.</returns>
            <exception cref="T:System.InvalidCastException">The element type of <paramref name="array"/> does not provide the <c>IConvertible</c> interface.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="start"/> is outside the bounds of <paramref name="array"/>.</exception>
        </member>
        <member name="M:System.Extensions.ConvertAll``1(System.Array,System.Int32,System.Int32)">
            <summary>
            Convert elements of an <c>Array</c> to <typeparamref name="TOut"/>,
            starting at <paramref name="start"/> for <paramref name="length"/> elements.
            </summary>
            <typeparam name="TOut">The output element type.</typeparam>
            <param name="array">The input array</param>
            <param name="start">The offset into <paramref name="array"/> from which to start creating the output.</param>
            <param name="length">The number of elements in the output.</param>
            <returns>An <c>TOut[]</c> array containing converted input elements.</returns>
            <exception cref="T:System.InvalidCastException">The element type of <paramref name="array"/> does not provide the <c>IConvertible</c> interface.
            <br/>-or-<br/>
            this conversion is not supported.
            <br/>-or-<br/>
            an <paramref name="array"/> element is null and <typeparamref name="TOut"/> is a value type.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="start"/> is outside the bounds of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="length"/> has an invalid value.</exception>
        </member>
        <member name="M:System.Extensions.ConvertAll``1(System.Array,System.Int32,System.Int32,System.IFormatProvider)">
            <summary>
            Convert elements of an <c>Array</c> to <typeparamref name="TOut"/>,
            starting at <paramref name="start"/> for <paramref name="length"/> elements.
            </summary>
            <typeparam name="TOut">The output element type.</typeparam>
            <param name="array">The input array</param>
            <param name="start">The offset into <paramref name="array"/> from which to start creating the output.</param>
            <param name="length">The number of elements in the output.</param>
            <param name="provider">An <c>System.IFormatProvider</c> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <c>TOut[]</c> array containing converted input elements.</returns>
            <exception cref="T:System.InvalidCastException">The element type of <paramref name="array"/> does not provide the <c>IConvertible</c> interface.
            <br/>-or-<br/>
            this conversion is not supported.
            <br/>-or-<br/>
            an <paramref name="array"/> element is null and <typeparamref name="TOut"/> is a value type.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="start"/> is outside the bounds of <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="length"/> has an invalid value.</exception>
        </member>
        <member name="M:System.Extensions.CompareTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Compares this instance to a specified list of type <typeparamref name="T"/>
            and returns an indication of their relative values.
            </summary>
            <typeparam name="T">A type supporting <c>IComparable{T}.</c></typeparam>
            <param name="value">This instance.</param>
            <param name="target">A list to compare.</param>
            <returns>An indication of the relative value of this instance and the specified list.</returns>
        </member>
        <member name="M:System.Extensions.Equals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Returns a value indicating whether this instance is equal to a specified list of <typeparamref name="T"/> values.
            </summary>
            <typeparam name="T">A type supporting <see cref="T:System.IEquatable`1"/>.</typeparam>
            <param name="value">This instance.</param>
            <param name="target">A list to compare.</param>
            <returns>And indication of the equality of the values of this instance and the specified list.</returns>
        </member>
        <member name="T:System.Configuration.PortableSettingsProvider">
            <summary>
            Provides persistence for application settings classes without the random folder naming of <see cref="T:System.Configuration.LocalFileSettingsProvider"/>.
            </summary>
        </member>
        <member name="M:System.Configuration.PortableSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection) on a provider after the provider has already been initialized.</exception>
        </member>
        <member name="M:System.Configuration.PortableSettingsProvider.GetApplicationIniFile(System.String)">
            <summary>
            Return the path of the ini file named <paramref name="suffix"/>.
            </summary>
            <param name="suffix">Name of the ini file.</param>
            <returns>The path of the ini file named <paramref name="suffix"/>.</returns>
        </member>
        <member name="M:System.Configuration.PortableSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Retrieve settings from the configuration file.
            </summary>
            <param name="sContext">Provides contextual information that the provider can use when persisting settings.</param>
            <param name="settingsColl">Contains a collection of <see cref="T:System.Configuration.SettingsProperty"/> objects.</param>
            <returns>A collection of settings property values that map <see cref="T:System.Configuration.SettingsProperty"/> objects to <see cref="T:System.Configuration.SettingsPropertyValue"/> objects.</returns>
        </member>
        <member name="M:System.Configuration.PortableSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Save any of the applications settings that have changed (flagged as "dirty").
            </summary>
            <param name="sContext">Provides contextual information that the provider can use when persisting settings.</param>
            <param name="settingsColl">Contains a collection of <see cref="T:System.Configuration.SettingsProperty"/> objects.</param>
            <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).</exception>
        </member>
        <member name="P:System.Configuration.PortableSettingsProvider.ExecutablePath">
            <summary>
            The path to the process executable.
            </summary>
        </member>
        <member name="P:System.Configuration.PortableSettingsProvider.ExecutableName">
            <summary>
            The name of the process, stripped of path and extension.
            </summary>
        </member>
        <member name="P:System.Configuration.PortableSettingsProvider.ApplicationName">
            <summary>
            Return the executing assembly name without extension.
            </summary>
        </member>
        <member name="P:System.Configuration.PortableSettingsProvider.ProgramApplicationData">
            <summary>
            Get the folder where data for the application product is held.
            </summary>
        </member>
        <member name="P:System.Configuration.PortableSettingsProvider.UserConfigurationData">
            <summary>
            Provide the application settings filename.
            </summary>
            <returns>The application settings filename.</returns>
        </member>
        <member name="T:System.Text.SevenBitString">
            <summary>
            Read and write a seven-bit encoded length-prefixed string in a given <see cref="T:System.Text.Encoding"/> from or to a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:System.Text.SevenBitString.Read(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Read a string from <see cref="T:System.IO.Stream"/> <paramref name="s"/> using <see cref="T:System.Text.Encoding"/> <paramref name="enc"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read string.</param>
            <param name="enc"><see cref="T:System.Text.Encoding"/> to use when reading.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:System.Text.SevenBitString.Write(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Write a string to <see cref="T:System.IO.Stream"/> <paramref name="s"/> using <see cref="T:System.Text.Encoding"/> <paramref name="enc"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to which to write string.</param>
            <param name="enc"><see cref="T:System.Text.Encoding"/> to use when writing.</param>
            <param name="value">The <see cref="T:System.String"/> to write.</param>
        </member>
        <member name="T:System.Text.BigEndianUnicodeString">
            <summary>
            Read and write a seven-bit encoded length-prefixed string in <see cref="P:System.Text.Encoding.BigEndianUnicode"/> from or to a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:System.Text.BigEndianUnicodeString.Read(System.IO.Stream)">
            <summary>
            Read a string from <see cref="T:System.IO.Stream"/> <paramref name="s"/> using <see cref="P:System.Text.Encoding.BigEndianUnicode"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> from which to read string.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:System.Text.BigEndianUnicodeString.Write(System.IO.Stream,System.String)">
            <summary>
            Write a string to <see cref="T:System.IO.Stream"/> <paramref name="s"/> using <see cref="P:System.Text.Encoding.BigEndianUnicode"/>.
            </summary>
            <param name="s"><see cref="T:System.IO.Stream"/> to which to write string.</param>
            <param name="value">The <see cref="T:System.String"/> to write.</param>
        </member>
        <member name="T:System.Security.Cryptography.Sims3PackCRC">
            <summary>
            Calculate the CRC of a data chunk stored in a Sims3Pack file.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.#ctor(System.UInt64)">
            <summary>
            Create a new CRC algorithm with an optional seed.
            </summary>
            <param name="seed">Optional CRC algorithm seed.</param>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the running hash with the data passed.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.HashFinal">
            <summary>
            Finalize the computation of the hash value.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.Initialize">
            <summary>
            Initialize the Sims3PackCRC by setting the current CRC value to the seed.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.CalculateCRC(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the Sims3Pack CRC value for the specified region of the specified byte array.
            </summary>
            <param name="buffer">The input to calculate the CRC for.</param>
            <param name="offset">The offset into the byte array from which to begin using data.</param>
            <param name="count">The number of bytes in the array to use as data.</param>
            <returns>The calculated CRC.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="count"/> is an invalid value.  -or- <paramref name="buffer"/> length is invalid.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is out of range. This parameter requires a non-negative number.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Sims3PackCRC.CalculateCRC(System.IO.Stream)">
            <summary>
            Calculate the CRC for the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The input to calculate the CRC for.</param>
            <returns>CRC of <paramref name="stream"/>.</returns>
        </member>
        <member name="P:System.Security.Cryptography.Sims3PackCRC.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.FNVHash">
            <summary>
            Base class implementing <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            For full documentation, refer to http://www.sims2wiki.info/wiki.php?title=FNV
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.FNVHash.hash">
            <summary>
            Algorithm result, needs casting to appropriate size by concrete classes (because I'm lazy)
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initialise the hash algorithm
            </summary>
            <param name="prime">algorithm-specific value</param>
            <param name="offset">algorithm-specific value</param>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.ComputeHash(System.String)">
            <summary>
            Method for hashing a string
            </summary>
            <param name="value">string</param>
            <returns>FNV hash of string</returns>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.Initialize">
            <summary>
            Nothing to initialize
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Implements the algorithm
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:System.Security.Cryptography.FNVHash.HashFinal">
            <summary>
            Returns the computed hash code.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:System.Security.Cryptography.FNV32">
            <summary>
            FNV32 hash routine
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV32.#ctor">
            <summary>
            Initialise the hash algorithm
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV32.GetHash(System.String)">
            <summary>
            Get the FNV32 hash for a string of text
            </summary>
            <param name="text">the text to get the hash for</param>
            <returns>the hash value</returns>
        </member>
        <member name="P:System.Security.Cryptography.FNV32.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.FNV32.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.FNV64">
            <summary>
            FNV64 hash routine
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV64.#ctor">
            <summary>
            Initialise the hash algorithm
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV64.GetHash(System.String)">
            <summary>
            Get the FNV64 hash for a string of text
            </summary>
            <param name="text">the text to get the hash for</param>
            <returns>the hash value</returns>
        </member>
        <member name="P:System.Security.Cryptography.FNV64.Hash">
            <summary>
            Gets the value of the computed hash code.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.FNV64.HashSize">
            <summary>
            Gets the size, in bits, of the computed hash code.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.FNV64CLIP">
            <summary>
            FNV64CLIP hash routine
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV64CLIP.#ctor">
            <summary>
            Initialise the hash algorithm
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.FNV64CLIP.GetHash(System.String)">
            <summary>
            Get the FNV64 hash for use as the IID for a CLIP of a given name.
            </summary>
            <param name="text">the CLIP name to get the hash for</param>
            <returns>the hash value</returns>
        </member>
        <member name="M:System.Security.Cryptography.FNV64CLIP.GetHashGeneric(System.String)">
            <summary>
            Get the FNV64 hash for use as the IID for a CLIP but ignoring age and species.
            </summary>
            <param name="text">The CLIP name to get the generic hash for.</param>
            <returns>The generic hash value</returns>
        </member>
        <member name="M:System.Security.Cryptography.FNV64CLIP.GetGenericValue(System.String)">
            <summary>
            Get the "generic" CLIP, removing age and species.
            </summary>
            <param name="text">The CLIP name from which to et the generic value.</param>
            <returns>The generic CLIP name.</returns>
        </member>
    </members>
</doc>
