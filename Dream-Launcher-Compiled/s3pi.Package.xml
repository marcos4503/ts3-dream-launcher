<?xml version="1.0"?>
<doc>
    <assembly>
        <name>s3pi.Package</name>
    </assembly>
    <members>
        <member name="T:s3pi.Package.Compression">
            <summary>
            Internal -- used by Package to handle compression routines
            </summary>
        </member>
        <member name="T:s3pi.Package.ResourceIndexEntry">
            <summary>
            Implementation of an index entry
            </summary>
        </member>
        <member name="M:s3pi.Package.ResourceIndexEntry.Clone(System.EventHandler)">
            <summary>
            Get a copy of this element but with a new change event handler
            </summary>
            <param name="handler">Element change event handler</param>
            <returns>Return a copy of this element but with a new change event handler</returns>
        </member>
        <member name="M:s3pi.Package.ResourceIndexEntry.Equals(s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Indicates whether the current <see cref="T:s3pi.Package.ResourceIndexEntry"/> instance is equal to another <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> instance.
            </summary>
            <param name="other">An <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> instance to compare with this instance.</param>
            <returns>true if the current instance is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
        </member>
        <member name="M:s3pi.Package.ResourceIndexEntry.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="F:s3pi.Package.ResourceIndexEntry.indexEntry">
            <summary>
            The index entry data
            </summary>
        </member>
        <member name="F:s3pi.Package.ResourceIndexEntry.isDeleted">
            <summary>
            True if the index entry should be treated as deleted
            </summary>
        </member>
        <member name="F:s3pi.Package.ResourceIndexEntry.resourceStream">
            <summary>
            The uncompressed resource data associated with this index entry
            (used to save having to uncompress the same entry again if it's requested more than once)
            </summary>
        </member>
        <member name="M:s3pi.Package.ResourceIndexEntry.#ctor(System.Byte[])">
            <summary>
            Create a new index entry as a byte-for-byte copy of <paramref name="indexEntry"/>
            </summary>
            <param name="indexEntry">The source index entry</param>
        </member>
        <member name="M:s3pi.Package.ResourceIndexEntry.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Create a new expanded index entry from the header and entry data passed
            </summary>
            <param name="header">header ints (same for each index entry); [0] is the index type</param>
            <param name="entry">entry ints (specific to this entry)</param>
        </member>
        <member name="M:s3pi.Package.ResourceIndexEntry.Clone">
            <summary>
            Return a new index entry as a copy of this one
            </summary>
            <returns>A copy of this index entry</returns>
        </member>
        <member name="M:s3pi.Package.ResourceIndexEntry.Delete">
            <summary>
            Flag this index entry as deleted
            </summary>
            <remarks>Use APackage.RemoveResource() from user code</remarks>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.RecommendedApiVersion">
            <summary>
            The version of the API in use
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.ResourceType">
            <summary>
            The "type" of the resource
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.ResourceGroup">
            <summary>
            The "group" the resource is part of
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.Instance">
            <summary>
            The "instance" number of the resource
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.Chunkoffset">
            <summary>
            If the resource was read from a package, the location in the package the resource was read from
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.Filesize">
            <summary>
            The number of bytes the resource uses within the package
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.Memsize">
            <summary>
            The number of bytes the resource uses in memory
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.Compressed">
            <summary>
            0xFFFF if Filesize != Memsize, else 0x0000
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.Unknown2">
            <summary>
            Always 0x0001
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.Stream">
            <summary>
            A MemoryStream covering the index entry bytes
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.IsDeleted">
            <summary>
            True if the index entry has been deleted from the package index
            </summary>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.ResourceStream">
            <summary>
            The uncompressed resource data associated with this index entry
            (used to save having to uncompress the same entry again if it's requested more than once)
            Setting the stream updates the Memsize
            </summary>
            <remarks>Use Package.ReplaceResource() from user code</remarks>
        </member>
        <member name="P:s3pi.Package.ResourceIndexEntry.IsDirty">
            <summary>
            True if the index entry should be treated as dirty - e.g. the ResourceStream has been replaced
            </summary>
        </member>
        <member name="T:s3pi.Package.Package">
            <summary>
            Implementation of a package
            </summary>
        </member>
        <member name="M:s3pi.Package.Package.SavePackage">
            <summary>
            Tell the package to save itself to wherever it believes it came from
            </summary>
        </member>
        <member name="M:s3pi.Package.Package.SaveAs(System.IO.Stream)">
            <summary>
            Save the package to a given stream
            </summary>
            <param name="s">Stream to save to</param>
        </member>
        <member name="M:s3pi.Package.Package.SaveAs(System.String)">
            <summary>
            Save the package to a given file
            </summary>
            <param name="path">File to save to - will be overwritten or created</param>
        </member>
        <member name="M:s3pi.Package.Package.NewPackage(System.Int32)">
            <summary>
            Initialise a new, empty package and return the IPackage reference
            </summary>
            <param name="APIversion">(unused)</param>
            <returns>IPackage reference to an empty package</returns>
        </member>
        <member name="M:s3pi.Package.Package.NewPackage(System.Int32,System.Int32)">
            <summary>
            Initialise a new, empty package and return the IPackage reference
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="major">Major version for the DBPF package.</param>
            <returns>IPackage reference to an empty package</returns>
        </member>
        <member name="M:s3pi.Package.Package.OpenPackage(System.Int32,System.String)">
            <summary>
            Open an existing package by filename, read only
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="packagePath">Fully qualified filename of the package</param>
            <returns>IPackage reference to an existing package on disk</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="packagePath"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="packagePath"/> is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            <paramref name="packagePath"/>, or a component of the file name, exceeds the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="packagePath"/> is an empty string (""), contains only white space, or contains one or more invalid characters.
            <br/>-or-<br/>
            <paramref name="packagePath"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="packagePath"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the package header is malformed.</exception>
        </member>
        <member name="M:s3pi.Package.Package.OpenPackage(System.Int32,System.String,System.Boolean)">
            <summary>
            Open an existing package by filename, optionally readwrite
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="packagePath">Fully qualified filename of the package</param>
            <param name="readwrite">True to indicate read/write access required</param>
            <returns>IPackage reference to an existing package on disk</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="packagePath"/> is null.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="packagePath"/> is invalid, such as being on an unmapped drive.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            <paramref name="packagePath"/>, or a component of the file name, exceeds the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="packagePath"/> is an empty string (""), contains only white space, or contains one or more invalid characters.
            <br/>-or-<br/>
            <paramref name="packagePath"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="packagePath"/> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The access requested is not permitted by the operating system for <paramref name="packagePath"/>,
            such as when access is ReadWrite and the file or directory is set for read-only access.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the package header is malformed.</exception>
        </member>
        <member name="M:s3pi.Package.Package.ClosePackage(System.Int32,s3pi.Interfaces.IPackage)">
            <summary>
            Releases any internal references associated with the given package
            </summary>
            <param name="APIversion">(unused)</param>
            <param name="pkg">IPackage reference to close</param>
        </member>
        <member name="M:s3pi.Package.Package.Find(System.UInt32,s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Searches for an element that matches the conditions defined by <paramref name="flags"/> and <paramref name="values"/>,
            and returns the first occurrence within the package index./>.
            </summary>
            <param name="flags">True bits enable matching against numerically equivalent <paramref name="values"/> entry</param>
            <param name="values">Fields to compare against</param>
            <returns>The first match, if any; otherwise null.</returns>
        </member>
        <member name="M:s3pi.Package.Package.Find(System.String[],s3pi.Interfaces.TypedValue[])">
            <summary>
            Searches for an element that matches the conditions defined by <paramref name="names"/> and <paramref name="values"/>,
            and returns the first occurrence within the package index./>.
            </summary>
            <param name="names">Names of fields to compare</param>
            <param name="values">Fields to compare against</param>
            <returns>The first match, if any; otherwise null.</returns>
        </member>
        <member name="M:s3pi.Package.Package.Find(System.Predicate{s3pi.Interfaces.IResourceIndexEntry})">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for the first <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> that matches the conditions defined by
            the <c>Predicate&lt;IResourceIndexEntry&gt;</c> <paramref name="Match"/>.
            </summary>
            <param name="Match"><c>Predicate&lt;IResourceIndexEntry&gt;</c> defining matching conditions.</param>
            <returns>The first matching <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>, if any; otherwise null.</returns>
            <remarks>Note that entries marked as deleted will not be returned.</remarks>
        </member>
        <member name="M:s3pi.Package.Package.FindAll(System.UInt32,s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            <paramref name="flags"/> and <paramref name="values"/>.
            </summary>
            <param name="flags">True bits enable matching against numerically equivalent <paramref name="values"/> entry.</param>
            <param name="values">Field values to compare against.</param>
            <returns>An <c>IList&lt;IResourceIndexEntry&gt;</c> of zero or more matches.</returns>
        </member>
        <member name="M:s3pi.Package.Package.FindAll(System.String[],s3pi.Interfaces.TypedValue[])">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            <paramref name="names"/> and <paramref name="values"/>.
            </summary>
            <param name="names">Names of <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/> fields to compare.</param>
            <param name="values">Field values to compare against.</param>
            <returns>An <c>IList&lt;IResourceIndexEntry&gt;</c> of zero or more matches.</returns>
        </member>
        <member name="M:s3pi.Package.Package.FindAll(System.Predicate{s3pi.Interfaces.IResourceIndexEntry})">
            <summary>
            Searches the entire <see cref="T:s3pi.Interfaces.IPackage"/>
            for all <see cref="T:s3pi.Interfaces.IResourceIndexEntry"/>s that matches the conditions defined by
            the <c>Predicate&lt;IResourceIndexEntry&gt;</c> <paramref name="Match"/>.
            </summary>
            <param name="Match"><c>Predicate&lt;IResourceIndexEntry&gt;</c> defining matching conditions.</param>
            <returns>Zero or more matches.</returns>
            <remarks>Note that entries marked as deleted will not be returned.</remarks>
        </member>
        <member name="M:s3pi.Package.Package.AddResource(s3pi.Interfaces.IResourceKey,System.IO.Stream,System.Boolean)">
            <summary>
            Add a resource to the package
            </summary>
            <param name="rk">The resource key</param>
            <param name="stream">The stream that contains the resource data</param>
            <param name="rejectDups">If true, fail if the resource key already exists</param>
            <returns>Null if rejectDups and the resource key exists; else the new IResourceIndexEntry</returns>
        </member>
        <member name="M:s3pi.Package.Package.ReplaceResource(s3pi.Interfaces.IResourceIndexEntry,s3pi.Interfaces.IResource)">
            <summary>
            Tell the package to replace the data for the resource indexed by <paramref name="rc"/>
            with the data from the resource <paramref name="res"/>
            </summary>
            <param name="rc">Target resource index</param>
            <param name="res">Source resource</param>
        </member>
        <member name="M:s3pi.Package.Package.DeleteResource(s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Tell the package to delete the resource indexed by <paramref name="rc"/>
            </summary>
            <param name="rc">Target resource index</param>
        </member>
        <member name="M:s3pi.Package.Package.GetResource(s3pi.Interfaces.IResourceIndexEntry)">
            <summary>
            Required internally by s3pi - <b>not</b> for use in user tools.
            Please use <c>WrapperDealer.GetResource(int, IPackage, IResourceIndexEntry)</c> instead.
            </summary>
            <param name="rc">IResourceIndexEntry of resource</param>
            <returns>The resource data (uncompressed, if necessary)</returns>
            <remarks>Used by WrapperDealer to get the data for a resource.</remarks>
        </member>
        <member name="P:s3pi.Package.Package.RecommendedApiVersion">
            <summary>
            The version of the API in use
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Magic">
            <summary>
            Package header: "DBPF" bytes
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Major">
            <summary>
            Package header: 0x00000002
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Minor">
            <summary>
            Package header: 0x00000000
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Unknown1">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Indexcount">
            <summary>
            Package header: number of entries in the package index
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Unknown2">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Indexsize">
            <summary>
            Package header: index size on disk in bytes
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Unknown3">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Indexversion">
            <summary>
            Package header: always 3?
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Indexposition">
            <summary>
            Package header: index position in file
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Unknown4">
            <summary>
            Package header: unused
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.HeaderStream">
            <summary>
            A MemoryStream covering the package header bytes
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.Indextype">
            <summary>
            Package index: the index format in use
            </summary>
        </member>
        <member name="P:s3pi.Package.Package.GetResourceList">
            <summary>
            Package index: the index
            </summary>
        </member>
        <member name="T:s3pi.Package.PackageIndex">
            <summary>
            Internal -- used by Package to manage the package index
            </summary>
        </member>
        <member name="M:s3pi.Package.PackageIndex.Sort(System.String)">
            <summary>
            Sort the index by the given field
            </summary>
            <param name="index">Field to sort by</param>
        </member>
        <member name="P:s3pi.Package.PackageIndex.Item(System.UInt32,System.UInt32,System.UInt64)">
            <summary>
            Return the index entry with the matching TGI
            </summary>
            <param name="type">Entry type</param>
            <param name="group">Entry group</param>
            <param name="instance">Entry instance</param>
            <returns>Matching entry</returns>
        </member>
        <member name="P:s3pi.Package.PackageIndex.Item(s3pi.Interfaces.IResourceKey)">
            <summary>
            Returns requested resource, ignoring EPFlags
            </summary>
            <param name="rk">Resource key to find</param>
            <returns>Matching entry</returns>
        </member>
    </members>
</doc>
